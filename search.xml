<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Django Rest Framework框架教程</title>
      <link href="/2023/05/11/Django%20Rest%20Framework%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B/"/>
      <url>/2023/05/11/Django%20Rest%20Framework%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p> 当学习Django Rest Framework（DRF）时，以下是一个可能的目录：</p><h1 id="DRF基础知识"><a href="#DRF基础知识" class="headerlink" title="DRF基础知识"></a>DRF基础知识</h1><h2 id="了解DRF"><a href="#了解DRF" class="headerlink" title="了解DRF"></a>了解DRF</h2><p>  DRF指的是Django Rest Framework，是一个开源的第三方库，它是基于Django框架的构建RESTful API的工具集。DRF提供了一组强大而灵活的工具，可以帮助开发人员更快地构建高质量的Web API，并提供基本的功能，如序列化、验证、认证、授权、过滤、搜索、分页、版本控制等。DRF还提供了可扩展性和灵活性，可以通过使用类和函数视图、路由和中间件等进行自定义。由于DRF是基于Django框架构建的，因此它可以轻松地集成到现有的Django应用程序中，并利用Django的许多优秀特性，如ORM、模型和管理界面等。</p><h2 id="安装DRF"><a href="#安装DRF" class="headerlink" title="安装DRF"></a>安装DRF</h2><table><thead><tr><th>软件</th><th>版本</th></tr></thead><tbody><tr><td>Python</td><td>3.8</td></tr><tr><td>Django</td><td>3.2.18</td></tr><tr><td>DRF</td><td>3.14.0</td></tr></tbody></table><p>安装drf</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3.8 install djangorestframework -i https://pypi.douban.com/simple</span><br></pre></td></tr></table></figure><p>配置Django使用DRF框架</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#编辑settings.py配置文件</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="DRF序列化"><a href="#DRF序列化" class="headerlink" title="DRF序列化"></a>DRF序列化</h1><p>API接口开发，最核心最常见的一个过程就是序列化，所谓序列化就是把数据转换格式，序列化可以分两个阶段：序列化和反序列化</p><h2 id="序列化和反序列化的区别"><a href="#序列化和反序列化的区别" class="headerlink" title="序列化和反序列化的区别"></a>序列化和反序列化的区别</h2><p>序列化可以理解为前端向Django请求数据，Django的模型对象数据无法直接让前端识别，所以需要将模型累对象数据序列化为Json数据返回给前端<br>反序列化也可以理解为前端向Django提交数据，但是该数据有部分Django无法识别或是需要将数据转换为其他类型；这时需要反序列化将数据进行转换</p><h2 id="序列化器"><a href="#序列化器" class="headerlink" title="序列化器"></a>序列化器</h2><h3 id="序列化器的作用"><a href="#序列化器的作用" class="headerlink" title="序列化器的作用"></a>序列化器的作用</h3><p>序列化：序列化器会把模型对象转换成字典,经过response以后变成json字符串<br>反序列化：把客户端发送过来的数据,经过request以后变成字典,序列化器可以把字典转成模型；完成数据校验功能</p><h2 id="序列化器-1"><a href="#序列化器-1" class="headerlink" title="序列化器"></a>序列化器</h2><p>定义序列化器</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfoSerializer</span>(serializers.Serializer):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">id</span> = serializers.IntegerField(label=<span class="string">&#x27;ID&#x27;</span>, read_only=<span class="literal">True</span>)</span><br><span class="line">    btitle = serializers.CharField(label=<span class="string">&#x27;名称&#x27;</span>, max_length=<span class="number">20</span>)</span><br><span class="line">    bpub_date = serializers.DateField(label=<span class="string">&#x27;发布日期&#x27;</span>, required=<span class="literal">False</span>)</span><br><span class="line">    bread = serializers.IntegerField(label=<span class="string">&#x27;阅读量&#x27;</span>, required=<span class="literal">False</span>)</span><br><span class="line">    bcomment = serializers.IntegerField(label=<span class="string">&#x27;评论量&#x27;</span>, required=<span class="literal">False</span>)</span><br><span class="line">    image = serializers.ImageField(label=<span class="string">&#x27;图片&#x27;</span>, required=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>序列化器的使用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">serializer.data <span class="comment">#返回Json数据</span></span><br></pre></td></tr></table></figure><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><h3 id="数据校验"><a href="#数据校验" class="headerlink" title="数据校验"></a>数据校验</h3><p>使用序列化器进行反序列化时，需要对数据进行验证后，才能获取验证成功的数据或保存成模型类对象。<br>在获取反序列化的数据前，必须调用<code>is_valid()</code>方法进行验证，验证成功返回True，否则返回False。<br>验证失败，可以通过序列化器对象的errors属性获取错误信息，返回字典，包含了字段和字段的错误。<br>如果是非字段错误，可以通过修改REST framework配置中的NON_FIELD_ERRORS_KEY来控制错误字典中的键名。<br>验证成功，可以通过序列化器对象的validated_data属性获取数据。<br>例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> serializer.is_vaild():</span><br><span class="line">    <span class="keyword">return</span> serializer.data</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> serializer.error</span><br></pre></td></tr></table></figure><h3 id="数据校验三种方式"><a href="#数据校验三种方式" class="headerlink" title="数据校验三种方式"></a>数据校验三种方式</h3><blockquote><p>数据校验<code>is_valid</code>和<code>validate</code>的区别</p></blockquote><p>当调用is_valid()方法时，DRF会自动执行验证规则，将验证结果存储在验证对象的errors属性中<br>validate()方法则提供了更高级别的验证逻辑。如果我们需要进行一些更加复杂的验证操作，可以通过重写validate()方法来实现。</p><blockquote><p>validate_字段名数据校验</p></blockquote><blockquote><p>validate数据校验</p></blockquote><blockquote><p>validators数据校验</p></blockquote><h3 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h3><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><h2 id="使用装饰器和Mixin进行视图的进一步定制"><a href="#使用装饰器和Mixin进行视图的进一步定制" class="headerlink" title="使用装饰器和Mixin进行视图的进一步定制"></a>使用装饰器和Mixin进行视图的进一步定制</h2><h2 id="序列化器的概念和作用"><a href="#序列化器的概念和作用" class="headerlink" title="序列化器的概念和作用"></a>序列化器的概念和作用</h2><h2 id="如何定义和使用序列化器"><a href="#如何定义和使用序列化器" class="headerlink" title="如何定义和使用序列化器"></a>如何定义和使用序列化器</h2><h1 id="认证和授权"><a href="#认证和授权" class="headerlink" title="认证和授权"></a>认证和授权</h1><h2 id="DRF提供的认证和授权类"><a href="#DRF提供的认证和授权类" class="headerlink" title="DRF提供的认证和授权类"></a>DRF提供的认证和授权类</h2><h2 id="自定义认证和授权类"><a href="#自定义认证和授权类" class="headerlink" title="自定义认证和授权类"></a>自定义认证和授权类</h2><h2 id="Token认证和Session认证"><a href="#Token认证和Session认证" class="headerlink" title="Token认证和Session认证"></a>Token认证和Session认证</h2><h2 id="基于角色和权限的授权"><a href="#基于角色和权限的授权" class="headerlink" title="基于角色和权限的授权"></a>基于角色和权限的授权</h2><h1 id="数据过滤、排序和分页"><a href="#数据过滤、排序和分页" class="headerlink" title="数据过滤、排序和分页"></a>数据过滤、排序和分页</h1><h2 id="过滤数据的方式"><a href="#过滤数据的方式" class="headerlink" title="过滤数据的方式"></a>过滤数据的方式</h2><h2 id="排序数据"><a href="#排序数据" class="headerlink" title="排序数据"></a>排序数据</h2><h2 id="分页数据"><a href="#分页数据" class="headerlink" title="分页数据"></a>分页数据</h2><h1 id="嵌套关系和反向关系"><a href="#嵌套关系和反向关系" class="headerlink" title="嵌套关系和反向关系"></a>嵌套关系和反向关系</h1><h2 id="处理嵌套序列化"><a href="#处理嵌套序列化" class="headerlink" title="处理嵌套序列化"></a>处理嵌套序列化</h2><h2 id="处理反向关系和外键"><a href="#处理反向关系和外键" class="headerlink" title="处理反向关系和外键"></a>处理反向关系和外键</h2><h1 id="文件上传和静态文件服务"><a href="#文件上传和静态文件服务" class="headerlink" title="文件上传和静态文件服务"></a>文件上传和静态文件服务</h1><h2 id="处理文件上传"><a href="#处理文件上传" class="headerlink" title="处理文件上传"></a>处理文件上传</h2><h2 id="使用Django的staticfiles服务提供静态文件"><a href="#使用Django的staticfiles服务提供静态文件" class="headerlink" title="使用Django的staticfiles服务提供静态文件"></a>使用Django的staticfiles服务提供静态文件</h2><h1 id="其他主题"><a href="#其他主题" class="headerlink" title="其他主题"></a>其他主题</h1><h2 id="使用第三方包和扩展（django-filter、django-rest-auth等）"><a href="#使用第三方包和扩展（django-filter、django-rest-auth等）" class="headerlink" title="使用第三方包和扩展（django-filter、django-rest-auth等）"></a>使用第三方包和扩展（django-filter、django-rest-auth等）</h2><h2 id="前端集成（使用React或Vue-js等）"><a href="#前端集成（使用React或Vue-js等）" class="headerlink" title="前端集成（使用React或Vue.js等）"></a>前端集成（使用React或Vue.js等）</h2><h2 id="使用Swagger生成API文档"><a href="#使用Swagger生成API文档" class="headerlink" title="使用Swagger生成API文档"></a>使用Swagger生成API文档</h2><h1 id="最佳实践和性能优化"><a href="#最佳实践和性能优化" class="headerlink" title="最佳实践和性能优化"></a>最佳实践和性能优化</h1><h2 id="应用最佳实践"><a href="#应用最佳实践" class="headerlink" title="应用最佳实践"></a>应用最佳实践</h2><h2 id="性能优化技巧和建议"><a href="#性能优化技巧和建议" class="headerlink" title="性能优化技巧和建议"></a>性能优化技巧和建议</h2>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MariaDB Galera HA多主复制</title>
      <link href="/2023/05/11/MariaDB%20Galera%20HA%E5%A4%9A%E4%B8%BB%E5%A4%8D%E5%88%B6/"/>
      <url>/2023/05/11/MariaDB%20Galera%20HA%E5%A4%9A%E4%B8%BB%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<ol><li>添加hosts<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/hosts</span><br><span class="line">192.168.100.17  mariadb01</span><br><span class="line">192.168.100.17  mariadb02</span><br></pre></td></tr></table></figure></li><li>添加yum源<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/yum.repos.d/mariadb.repo </span><br><span class="line">[mariadb]</span><br><span class="line">name=mariadb</span><br><span class="line">baseurl=http://yum.mariadb.org/10.3.9/centos7-amd64/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure></li><li>安装数据库软件包<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install MariaDB-server</span><br></pre></td></tr></table></figure></li><li>备份数据库配置文件，并修改<code>/etc/my.cnf.d/server.cnf</code>配置文件<br>mariadb01配置：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[galera]</span><br><span class="line">wsrep_on=ON</span><br><span class="line">wsrep_provider=/usr/lib64/galera/libgalera_smm.so</span><br><span class="line">wsrep_cluster_address=&quot;gcomm://192.168.100.17:4567,192.168.100.18:4567&quot;</span><br><span class="line">wsrep_node_name= mariadb01</span><br><span class="line">wsrep_node_address=192.168.100.17</span><br><span class="line">binlog_format=row</span><br><span class="line">default_storage_engine=InnoDB</span><br><span class="line">innodb_autoinc_lock_mode=2</span><br><span class="line">wsrep_slave_threads=1</span><br><span class="line">innodb_flush_log_at_trx_commit=0</span><br><span class="line">innodb_buffer_pool_size=120M</span><br><span class="line">wsrep_sst_method=rsync</span><br><span class="line">wsrep_causal_reads=ON</span><br></pre></td></tr></table></figure>mariadb02配置：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[galera]</span><br><span class="line">wsrep_on=ON</span><br><span class="line">wsrep_provider=/usr/lib64/galera/libgalera_smm.so</span><br><span class="line">wsrep_cluster_address=&quot;gcomm://192.168.100.18:4567,192.168.100.17:4567&quot;</span><br><span class="line">wsrep_node_name= mariadb02</span><br><span class="line">wsrep_node_address=192.168.100.18</span><br><span class="line">binlog_format=row</span><br><span class="line">default_storage_engine=InnoDB</span><br><span class="line">innodb_autoinc_lock_mode=2</span><br><span class="line">wsrep_slave_threads=1</span><br><span class="line">innodb_flush_log_at_trx_commit=0</span><br><span class="line">innodb_buffer_pool_size=120M</span><br><span class="line">wsrep_sst_method=rsync</span><br><span class="line">wsrep_causal_reads=ON</span><br></pre></td></tr></table></figure></li><li>配置iptables规则<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables -I INPUT 1 -p tcp -m multiport --dport 3306,4567 -j ACCEPT</span><br><span class="line">service iptables save</span><br></pre></td></tr></table></figure></li><li>第一个节点第一次启动<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">galera_new_cluster</span><br><span class="line">systemctl enable mariadb</span><br></pre></td></tr></table></figure>其他节点启动<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable mariadb</span><br><span class="line">systemctl start mariadb</span><br></pre></td></tr></table></figure></li><li>查看集群状态<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; show status like &quot;wsrep%&quot;;</span><br><span class="line">+------------------------------+-----------------------------------------+</span><br><span class="line">| Variable_name                | Value                                   |</span><br><span class="line">+------------------------------+-----------------------------------------+</span><br><span class="line">| wsrep_apply_oooe             | 0.000000                                |</span><br><span class="line">| wsrep_apply_oool             | 0.000000                                |</span><br><span class="line">| wsrep_apply_window           | 0.000000                                |</span><br><span class="line">| wsrep_causal_reads           | 3                                       |</span><br><span class="line">| wsrep_cert_deps_distance     | 0.000000                                |</span><br><span class="line">| wsrep_cert_index_size        | 0                                       |</span><br><span class="line">| wsrep_cert_interval          | 0.000000                                |</span><br><span class="line">| wsrep_cluster_conf_id        | 10                                      |</span><br><span class="line">| wsrep_cluster_size           | 2                                       |</span><br><span class="line">| wsrep_cluster_state_uuid     | 7425394a-d931-11e8-86a0-d29d9b403794    |</span><br><span class="line">| wsrep_cluster_status         | Primary                                 |</span><br><span class="line">| wsrep_commit_oooe            | 0.000000                                |</span><br><span class="line">| wsrep_commit_oool            | 0.000000                                |</span><br><span class="line">| wsrep_commit_window          | 0.000000                                |</span><br><span class="line">| wsrep_connected              | ON                                      |</span><br><span class="line">| wsrep_desync_count           | 0                                       |</span><br><span class="line">| wsrep_evs_delayed            |                                         |</span><br><span class="line">| wsrep_evs_evict_list         |                                         |</span><br><span class="line">| wsrep_evs_repl_latency       | 0/0/0/0/0                               |</span><br><span class="line">| wsrep_evs_state              | OPERATIONAL                             |</span><br><span class="line">| wsrep_flow_control_paused    | 0.000000                                |</span><br><span class="line">| wsrep_flow_control_paused_ns | 0                                       |</span><br><span class="line">| wsrep_flow_control_recv      | 0                                       |</span><br><span class="line">| wsrep_flow_control_sent      | 0                                       |</span><br><span class="line">| wsrep_gcomm_uuid             | d0460120-d932-11e8-8779-7fda4c3b845f    |</span><br><span class="line">| wsrep_incoming_addresses     | 192.168.100.18:3306,192.168.100.17:3306 |</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MariaDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华为S5328交换机重置</title>
      <link href="/2023/05/11/%E5%8D%8E%E4%B8%BAS5328%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%87%8D%E7%BD%AE/"/>
      <url>/2023/05/11/%E5%8D%8E%E4%B8%BAS5328%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%87%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<ol><li>连接交换机console线<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">User interface con0 is available</span><br><span class="line"></span><br><span class="line">Please Press ENTER.</span><br></pre></td></tr></table></figure></li><li>重启交换机，进入bootrom；输入密码：huawei<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">BIOS LOADING ...</span><br><span class="line">Copyright (c) 2008-2010 HUAWEI TECH CO., LTD.</span><br><span class="line">(Ver107, Jan 18 2011, 22:52:53)</span><br><span class="line"></span><br><span class="line">Press Ctrl+B to enter BOOTROM menu... 1</span><br><span class="line">password: </span><br></pre></td></tr></table></figure></li><li>输入密码之后，返回bootrom菜单<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">      BOOTROM  MENU</span><br><span class="line"></span><br><span class="line">1. Boot with default mode</span><br><span class="line">2. Enter serial submenu</span><br><span class="line">3. Enter startup submenu</span><br><span class="line">4. Enter ethernet submenu</span><br><span class="line">5. Enter filesystem submenu</span><br><span class="line">6. Modify BOOTROM password</span><br><span class="line">7. Reboot</span><br></pre></td></tr></table></figure></li><li>选择5选项<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Enter your choice(1-7): 5</span><br><span class="line"></span><br><span class="line">         FILESYSTEM SUBMENU</span><br><span class="line"></span><br><span class="line">    1. Erase Flash            </span><br><span class="line">    2. Format flash           </span><br><span class="line">    3. Delete file from Flash </span><br><span class="line">    4. Rename file from Flash </span><br><span class="line">    5. Display Flash files    </span><br><span class="line">    6. Update EPLD file       </span><br><span class="line">    7. Update FansCard File   </span><br><span class="line">    8. Return to main menu    </span><br><span class="line"></span><br><span class="line">Enter your choice(1-8): </span><br></pre></td></tr></table></figure></li><li>选择4选项查看系统版本<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Enter your choice(1-8): 4</span><br><span class="line">No. File Size(bytes)     Created Date       File Name</span><br><span class="line">=================================================================</span><br><span class="line">1:  1827     bytes   Dec 26 2019 04:35:11   private-data.txt                    </span><br><span class="line">2:  836      bytes   Dec 26 2019 04:35:33   rr.dat                              </span><br><span class="line">3:  836      bytes   Dec 26 2019 04:35:47   rr.bak                              </span><br><span class="line">4:  1060797  bytes   Aug 14 2013 01:31:22   s23_33_53-v100r005sph020.pat        </span><br><span class="line">5:  1355     bytes   Jan 28 2015 16:18:03   vrpcfg.zip                          </span><br><span class="line">6:  11113860 bytes   Oct 01 2008 00:08:13   S5300EI-V100R005C01SPC100.cc        </span><br><span class="line">7:  12240    bytes   Aug 14 2013 01:33:47   <span class="variable">$_patchstate_reboot</span>                 </span><br><span class="line">8:  457619   bytes   Oct 01 2008 00:16:56   s23_33_53-v100r005sph005.pat        </span><br><span class="line"></span><br><span class="line">BE CAREFUL!</span><br><span class="line">This may cause your system fail to start!</span><br><span class="line">Please choose the file you want to rename:  </span><br></pre></td></tr></table></figure></li><li>输入vrpcfg.zip<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Please choose the file you want to rename:  vrpcfg.zip</span><br><span class="line"></span><br><span class="line">Please Input the new filename:  </span><br></pre></td></tr></table></figure></li><li>输入vrpcfg1.zip<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Please Input the new filename:  vrpcfg1.zip</span><br><span class="line"></span><br><span class="line">Rename file ......<span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">         FILESYSTEM SUBMENU</span><br><span class="line"></span><br><span class="line">    1. Erase Flash            </span><br><span class="line">    2. Format flash           </span><br><span class="line">    3. Delete file from Flash </span><br><span class="line">    4. Rename file from Flash </span><br><span class="line">    5. Display Flash files    </span><br><span class="line">    6. Update EPLD file       </span><br><span class="line">    7. Update FansCard File   </span><br><span class="line">    8. Return to main menu    </span><br><span class="line"></span><br><span class="line">Enter your choice(1-8): </span><br></pre></td></tr></table></figure></li><li>选择8选项返回bootrom菜单后选择1选项，重启交换机<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">          BOOTROM  MENU</span><br><span class="line"></span><br><span class="line">    1. Boot with default mode</span><br><span class="line">    2. Enter serial submenu</span><br><span class="line">    3. Enter startup submenu</span><br><span class="line">    4. Enter ethernet submenu</span><br><span class="line">    5. Enter filesystem submenu</span><br><span class="line">    6. Modify BOOTROM password</span><br><span class="line">    7. Reboot</span><br><span class="line"></span><br><span class="line">Enter your choice(1-7): 1</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>华为交换机配置远程访问</title>
      <link href="/2023/05/11/%E5%8D%8E%E4%B8%BA%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%85%8D%E7%BD%AE%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/"/>
      <url>/2023/05/11/%E5%8D%8E%E4%B8%BA%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%85%8D%E7%BD%AE%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<ol><li>创建管理vlan和管理口<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[HUAWEI]vlan 101</span><br><span class="line">[HUAWEI-vlan101]quit</span><br><span class="line">[HUAWEI]interface Vlanif 101</span><br><span class="line">[HUAWEI-Vlanif101]ip address 172.16.1.254 255.255.255.0</span><br><span class="line">[HUAWEI]interface GigabitEthernet 0/0/1</span><br><span class="line">[HUAWEI-GigabitEthernet0/0/1]port link-type access</span><br><span class="line">[HUAWEI-GigabitEthernet0/0/1]port default vlan 101</span><br></pre></td></tr></table></figure></li><li>创建本地用户用来远程访问<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[HUAWEI]aaa</span><br><span class="line">[HUAWEI-aaa]local-user t2cloud password cipher !QAZ2wsx</span><br><span class="line">#设置用户服务类型</span><br><span class="line">[HUAWEI-aaa]local-user t2cloud service-type ssh telnet http</span><br><span class="line">#设置用户级别</span><br><span class="line">[HUAWEI-aaa]local-user t2cloud privilege level 15</span><br></pre></td></tr></table></figure></li><li>设置远程访问的虚拟端口<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[HUAWEI]user-interface vty 0 4</span><br><span class="line">[HUAWEI-ui-vty0-4]authentication-mode aaa</span><br><span class="line">[HUAWEI-ui-vty0-4]protocol inbound all</span><br></pre></td></tr></table></figure></li><li>设置ssh用户认证为密码认证<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[HUAWEI]ssh user t2cloud authentication-type password </span><br><span class="line">#设置ssh默认为password认证</span><br><span class="line">[HUAWEI]ssh authentication-type default password </span><br></pre></td></tr></table></figure></li><li>设置ssh服务认证类型为stelnet<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[HUAWEI]ssh user t2cloud service-type stelnet</span><br></pre></td></tr></table></figure></li><li>设置ssh服务<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[HUAWEI]ssh server port 22</span><br><span class="line">[HUAWEI]stelnet server enable</span><br><span class="line">#检查ssh服务的状态</span><br><span class="line">[HUAWEI]aaa</span><br><span class="line">[HUAWEI-aaa]display ssh server status</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 交换机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>扩展lvm根分区</title>
      <link href="/2023/05/11/%E6%89%A9%E5%B1%95lvm%E6%A0%B9%E5%88%86%E5%8C%BA/"/>
      <url>/2023/05/11/%E6%89%A9%E5%B1%95lvm%E6%A0%B9%E5%88%86%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<ol><li>查看lvm卷组<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">VG <span class="comment">#PV #LV #SN Attr   VSize  VFree</span></span><br><span class="line">cl   1   2   0 wz--n- 19.00g    0 </span><br></pre></td></tr></table></figure></li><li>添加磁盘并将分区转换为lvm分区，新建的lvm分区为sda3<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Disk /dev/sda: 107.4 GB, 107374182400 bytes, 209715200 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk label <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x000af7fc</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sda1   *        2048     2099199     1048576   83  Linux</span><br><span class="line">/dev/sda2         2099200    41943039    19921920   8e  Linux LVM</span><br><span class="line">/dev/sda3        41943040   209715199    83886080   8e  Linux LVM</span><br></pre></td></tr></table></figure></li><li>创建pv<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pvcreate /dev/sda3</span><br></pre></td></tr></table></figure></li><li>扩展vg<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vgextend cl /dev/sda3</span><br></pre></td></tr></table></figure></li><li>查看扩展的vg<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@acai ~]<span class="comment"># vgs</span></span><br><span class="line">  VG <span class="comment">#PV #LV #SN Attr   VSize  VFree </span></span><br><span class="line">  cl   2   2   0 wz--n- 98.99g 80.00g</span><br></pre></td></tr></table></figure></li><li>扩展lv<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@acai ~]<span class="comment"># lvextend -L +79G /dev/cl/root </span></span><br><span class="line">  Size of logical volume cl/root changed from 17.00 GiB (4351 extents) to 96.00 GiB (24575 extents).</span><br><span class="line">  Logical volume cl/root successfully resized.</span><br></pre></td></tr></table></figure></li><li>刷新分区表(如果分区的文件系统为xfs，需要使用xfs_growfs)<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@acai ~]<span class="comment"># xfs_growfs /dev/mapper/cl-root </span></span><br><span class="line">meta-data=/dev/mapper/cl-root    isize=512    agcount=4, agsize=1113856 blks</span><br><span class="line">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class="line">         =                       crc=1        finobt=0 spinodes=0</span><br><span class="line">data     =                       bsize=4096   blocks=4455424, imaxpct=25</span><br><span class="line">         =                       sunit=0      swidth=0 blks</span><br><span class="line">naming   =version 2              bsize=4096   ascii-ci=0 ftype=1</span><br><span class="line"><span class="built_in">log</span>      =internal               bsize=4096   blocks=2560, version=2</span><br><span class="line">         =                       sectsz=512   sunit=0 blks, lazy-count=1</span><br><span class="line">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br><span class="line">data blocks changed from 4455424 to 25164800</span><br></pre></td></tr></table></figure></li><li>验证根分区<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@acai ~]<span class="comment"># df -h</span></span><br><span class="line">Filesystem           Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/mapper/cl-root   96G  1.3G   95G   2% /</span><br><span class="line">devtmpfs             1.9G     0  1.9G   0% /dev</span><br><span class="line">tmpfs                1.9G     0  1.9G   0% /dev/shm</span><br><span class="line">tmpfs                1.9G  8.6M  1.9G   1% /run</span><br><span class="line">tmpfs                1.9G     0  1.9G   0% /sys/fs/cgroup</span><br><span class="line">/dev/sda1           1014M  139M  876M  14% /boot</span><br><span class="line">tmpfs                378M     0  378M   0% /run/user/0</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ceph-luminous指定磁盘类型创建存储池</title>
      <link href="/2023/05/11/ceph-luminous%E6%8C%87%E5%AE%9A%E7%A3%81%E7%9B%98%E7%B1%BB%E5%9E%8B%E5%88%9B%E5%BB%BA%E5%AD%98%E5%82%A8%E6%B1%A0/"/>
      <url>/2023/05/11/ceph-luminous%E6%8C%87%E5%AE%9A%E7%A3%81%E7%9B%98%E7%B1%BB%E5%9E%8B%E5%88%9B%E5%BB%BA%E5%AD%98%E5%82%A8%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><table><thead><tr><th align="center">主机名称</th><th align="center">IP地址</th><th align="center">磁盘个数</th></tr></thead><tbody><tr><td align="center">acai01</td><td align="center">192.168.1.101</td><td align="center">2</td></tr><tr><td align="center">acai02</td><td align="center">192.168.1.102</td><td align="center">2</td></tr></tbody></table><h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h1><ul><li>通过curshmap修改每个节点sdb为sas磁盘类型，sdc为ssd磁盘类型 </li><li>通过修改ceph crushmap实现通过OSD磁盘类型创建存储池，例如SAS磁盘创建saspool、SSD磁盘创建ssdpool </li><li>验证在不同存储池中创建volume，pg分布在不同的OSD上。</li></ul><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><p>1.查看ceph集群节点osd分布</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ceph osd tree</span><br><span class="line">ID CLASS WEIGHT  TYPE NAME       STATUS REWEIGHT PRI-AFF </span><br><span class="line">-1       0.39038 root default                            </span><br><span class="line">-3       0.19519     host acai01                         </span><br><span class="line"> 0   hdd 0.09760         osd.0       up  1.00000 1.00000 </span><br><span class="line"> 3   hdd 0.09760         osd.3       up  1.00000 1.00000 </span><br><span class="line">-5       0.19519     host acai02                         </span><br><span class="line"> 1   hdd 0.09760         osd.1       up  1.00000 1.00000 </span><br><span class="line"> 2   hdd 0.09760         osd.2       up  1.00000 1.00000 </span><br></pre></td></tr></table></figure><p>2.查看ceph集群默认的设备crush class</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ceph osd crush class ls</span><br><span class="line">[</span><br><span class="line">    &quot;hdd&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>3.删除默认的crush class</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i in &#123;0..3&#125;;do ceph osd crush rm-device-class osd.$i;done</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ceph osd crush tree</span><br><span class="line">ID CLASS WEIGHT  TYPE NAME       </span><br><span class="line">-1       0.39038 root default    </span><br><span class="line">-3       0.19519     host acai01 </span><br><span class="line"> 0       0.09760         osd.0   </span><br><span class="line"> 3       0.09760         osd.3   </span><br><span class="line">-5       0.19519     host acai02 </span><br><span class="line"> 1       0.09760         osd.1   </span><br><span class="line"> 2       0.09760         osd.2   </span><br></pre></td></tr></table></figure><p>4.获取crushmap</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ceph osd getcrushmap -o ceph-crush-map</span><br></pre></td></tr></table></figure><p>5.反编译获取的crushmap</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crushtool -d ceph-crush-map -o ceph-crush-map.txt</span><br></pre></td></tr></table></figure><p>6.编辑crushmap</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#修改bucket部分，将vdb设置为sas-host，将vdc设置为ssd-host</span><br><span class="line"># buckets</span><br><span class="line">host sas-acai01 &#123;</span><br><span class="line">        alg straw2</span><br><span class="line">        hash 0  # rjenkins1</span><br><span class="line">        item osd.0 weight 0.098</span><br><span class="line">&#125;</span><br><span class="line">host ssd-acai01 &#123;</span><br><span class="line">        alg straw2</span><br><span class="line">        hash 0  # rjenkins1</span><br><span class="line">        item osd.3 weight 0.098</span><br><span class="line">&#125;</span><br><span class="line">host sas-acai02 &#123;</span><br><span class="line">        alg straw2</span><br><span class="line">        hash 0  # rjenkins1</span><br><span class="line">        item osd.1 weight 0.098</span><br><span class="line">&#125;</span><br><span class="line">host ssd-acai02 &#123;</span><br><span class="line">        alg straw2</span><br><span class="line">        hash 0  # rjenkins1</span><br><span class="line">        item osd.2 weight 0.098</span><br><span class="line">&#125;</span><br><span class="line">#修改root部分，定义两个root；sas-root、ssd-root</span><br><span class="line">#root需要跟定义的host关联，所以sas-host关联sas-root；ssd-host关联ssd-root</span><br><span class="line">#root</span><br><span class="line">root sas-root &#123;</span><br><span class="line">alg straw2</span><br><span class="line">hash 0# rjenkins1</span><br><span class="line">item sas-acai01 weight 0.195</span><br><span class="line">item sas-acai02 weight 0.195</span><br><span class="line">&#125;</span><br><span class="line">root ssd-root &#123;</span><br><span class="line">alg straw2</span><br><span class="line">hash 0# rjenkins1</span><br><span class="line">        item ssd-acai01 weight 0.195</span><br><span class="line">        item ssd-acai02 weight 0.195</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#修改rules部分，定义两个rule；sas-rule、ssd-rule</span><br><span class="line">#rule需要跟定义的root关联，所以需要咋step take中指定对应的root</span><br><span class="line">#rules</span><br><span class="line">rule sas-rule &#123;</span><br><span class="line">        id 0</span><br><span class="line">type replicated</span><br><span class="line">min_size 1</span><br><span class="line">max_size 10</span><br><span class="line">step take sas-root</span><br><span class="line">step chooseleaf firstn 0 type host</span><br><span class="line">step emit</span><br><span class="line">&#125;</span><br><span class="line">rule ssd-rule &#123;</span><br><span class="line">        id 1</span><br><span class="line">type replicated</span><br><span class="line">min_size 1</span><br><span class="line">max_size 10</span><br><span class="line">step take ssd-root</span><br><span class="line">step chooseleaf firstn 0 type host</span><br><span class="line">step emit</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>7.保存修改，并编译crushmap</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crushtool -c ceph-crush-map.txt -o modify-ceph-crush-map</span><br></pre></td></tr></table></figure><p>8.将编译的crushmap注入到ceph集群</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ceph osd setcrushmap -i modify-ceph-crush-map</span><br></pre></td></tr></table></figure><p>9.检查ceph集群</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ceph osd tree</span><br><span class="line">ID CLASS WEIGHT  TYPE NAME           STATUS REWEIGHT PRI-AFF </span><br><span class="line">-6       0.38998 root ssd-root                               </span><br><span class="line">-2       0.19499     host ssd-acai01                         </span><br><span class="line"> 3       0.09799         osd.3           up  1.00000 1.00000 </span><br><span class="line">-4       0.19499     host ssd-acai02                         </span><br><span class="line"> 2       0.09799         osd.2           up  1.00000 1.00000 </span><br><span class="line">-5       0.38998 root sas-root                               </span><br><span class="line">-1       0.19499     host sas-acai01                         </span><br><span class="line"> 0       0.09799         osd.0           up  1.00000 1.00000 </span><br><span class="line">-3       0.19499     host sas-acai02                         </span><br><span class="line"> 1       0.09799         osd.1           up  1.00000 1.00000 </span><br></pre></td></tr></table></figure><p>10.设置osd.0、osd.1 crush class为sas;设置osd.2、osd.3 crush class为ssd</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i in &#123;0..1&#125;;do ceph osd crush set-device-class sas osd.$i;done</span><br><span class="line">for i in &#123;2..3&#125;;do ceph osd crush set-device-class ssd osd.$i;done</span><br></pre></td></tr></table></figure><p>11.查看osd crush class</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ceph osd tree</span><br><span class="line">ID CLASS WEIGHT  TYPE NAME           STATUS REWEIGHT PRI-AFF </span><br><span class="line">-6       0.38998 root ssd-root                               </span><br><span class="line">-2       0.19499     host ssd-acai01                         </span><br><span class="line"> 3   ssd 0.09799         osd.3           up  1.00000 1.00000 </span><br><span class="line">-4       0.19499     host ssd-acai02                         </span><br><span class="line"> 2   ssd 0.09799         osd.2           up  1.00000 1.00000 </span><br><span class="line">-5       0.38998 root sas-root                               </span><br><span class="line">-1       0.19499     host sas-acai01                         </span><br><span class="line"> 0   sas 0.09799         osd.0           up  1.00000 1.00000 </span><br><span class="line">-3       0.19499     host sas-acai02                         </span><br><span class="line"> 1   sas 0.09799         osd.1           up  1.00000 1.00000 </span><br></pre></td></tr></table></figure><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><ul><li>确认saspool中的数据分布在sas osd上，ssdpool中的数据分布在ssdpool上</li></ul><p>1.分别使用sas-rule、ssd-rule创建存储池</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ceph osd pool create saspool 64 64 sas-rule</span><br><span class="line">ceph osd pool create ssdpool 64 64 ssd-rule</span><br></pre></td></tr></table></figure><p>2.分别在saspool中创建sasvolume、ssdpool中创建ssdvolume</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rbd create saspool/sasvolume --size 1G</span><br><span class="line">rbd create ssdpool/ssdvolume --size 1G</span><br></pre></td></tr></table></figure><p>3.获取saspool存储池中pg分布在哪个osd上</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#获取osdmap</span><br><span class="line">ceph osd getmap -o om</span><br><span class="line">#获取crushmap</span><br><span class="line">ceph osd getcrushmap -o cm</span><br></pre></td></tr></table></figure><p>获取saspool存储池pg分布在哪个osd上(从获取的结果中可以看出，saspool存储池中pg分布在osd.0、osd.1;–pool参数指定存储池的ID)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">osdmaptool om --import-crush cm --test-map-pgs --pool 1</span><br><span class="line">osdmaptool: osdmap file &#x27;om&#x27;</span><br><span class="line">osdmaptool: imported 682 byte crush map from cm</span><br><span class="line">pool 1 pg_num 64</span><br><span class="line">#osdcountfirstprimaryc wtwt</span><br><span class="line">osd.03333330.09799191</span><br><span class="line">osd.13131310.09799191</span><br><span class="line">osd.20000.09799191</span><br><span class="line">osd.30000.09799191</span><br><span class="line"> in 4</span><br><span class="line"> avg 16 stddev 16.0156 (1.00098x) (expected 3.4641 0.216506x))</span><br><span class="line"> min osd.1 31</span><br><span class="line"> max osd.0 33</span><br><span class="line">size 00</span><br><span class="line">size 164</span><br><span class="line">size 20</span><br><span class="line">size 30</span><br></pre></td></tr></table></figure><p>获取ssdpool存储池pg分布在哪个osd上(从获取的结果中可以看出，ssdpool存储池中pg分布在osd.2、osd.3;–pool参数指定存储池的ID)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">osdmaptool om --import-crush cm --test-map-pgs --pool 2</span><br><span class="line">osdmaptool: osdmap file &#x27;om&#x27;</span><br><span class="line">osdmaptool: imported 682 byte crush map from cm</span><br><span class="line">pool 2 pg_num 64</span><br><span class="line">#osdcountfirstprimaryc wtwt</span><br><span class="line">osd.00000.09799191</span><br><span class="line">osd.10000.09799191</span><br><span class="line">osd.23333330.09799191</span><br><span class="line">osd.33131310.09799191</span><br><span class="line"> in 4</span><br><span class="line"> avg 16 stddev 16.0156 (1.00098x) (expected 3.4641 0.216506x))</span><br><span class="line"> min osd.3 31</span><br><span class="line"> max osd.2 33</span><br><span class="line">size 00</span><br><span class="line">size 164</span><br><span class="line">size 20</span><br><span class="line">size 30</span><br><span class="line">osdmaptool: writing epoch 43 to om</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 分布式存储 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ceph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MegaCli64配置服务器磁盘RAID</title>
      <link href="/2023/05/11/MegaCli64%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A3%81%E7%9B%98RAID/"/>
      <url>/2023/05/11/MegaCli64%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A3%81%E7%9B%98RAID/</url>
      
        <content type="html"><![CDATA[<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><table><thead><tr><th>参数</th><th>介绍</th></tr></thead><tbody><tr><td>Adapter #0</td><td>阵列卡号,适配器编号</td></tr><tr><td>Enclosure Device ID: 32</td><td>raid卡的ID号</td></tr><tr><td>Slot Number: 0</td><td>物理磁盘的slot号,磁盘位置</td></tr><tr><td>-r</td><td>指定raid类型，比如：raid0、raid1</td></tr><tr><td>WB</td><td>缓存策略</td></tr><tr><td>Direct</td><td>缓存策略</td></tr><tr><td>[32:1]</td><td>指定要操作的硬盘，如要对多个硬盘操作，用逗号“，”隔开,[32:0,32,1]</td></tr><tr><td>-CfgLdAdd</td><td>增加虚拟磁盘，创建raid​</td></tr></tbody></table><h1 id="查看磁盘信息"><a href="#查看磁盘信息" class="headerlink" title="查看磁盘信息"></a>查看磁盘信息</h1><blockquote><p>查看raid级别</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MegaCli64 -LDInfo -Lall -aALL</span><br></pre></td></tr></table></figure><blockquote><p>查看raid卡信息</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MegaCli64 -AdpAllInfo -aALL</span><br></pre></td></tr></table></figure><blockquote><p>查看硬盘信息</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MegaCli64 -PDList -aALL</span><br></pre></td></tr></table></figure><blockquote><p>查看适配器个数</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MegaCli64 -adpCount</span><br></pre></td></tr></table></figure><blockquote><p>查看所有适配器信息</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MegaCli64 -AdpAllInfo -aAll</span><br></pre></td></tr></table></figure><blockquote><p>查看所有逻辑磁盘组信息</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MegaCli64 -LDInfo -LALL -aAll</span><br></pre></td></tr></table></figure><blockquote><p>查看所有物理磁盘信息</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MegaCli64 -PDList -aAll</span><br></pre></td></tr></table></figure><blockquote><p>查看raid卡型号、raid设置、disk相关信息</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MegaCli64 -cfgdsply -aALL</span><br></pre></td></tr></table></figure><blockquote><p>查看物理硬盘的状态</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MegaCli64 -PDList -aALL | egrep <span class="string">&#x27;Firmware state&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="配置raid0"><a href="#配置raid0" class="headerlink" title="配置raid0"></a>配置raid0</h1><blockquote><p>查看磁盘个数</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MegaCli64 -PDList -aALL|grep <span class="string">&quot;Slot Number&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>创建raid0</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MegaCli64 -CfgLdAdd -r0 [22:1] WB Direct -a0</span><br></pre></td></tr></table></figure><blockquote><p>检查配置</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MegaCli64 -LDInfo -LALL -aAll | grep RAID</span><br></pre></td></tr></table></figure><h1 id="配置raid1"><a href="#配置raid1" class="headerlink" title="配置raid1"></a>配置raid1</h1><blockquote><p>创建raid1</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MegaCli64 -CfgLdAdd -r1 [22:1] WB Direct -a0</span><br></pre></td></tr></table></figure><blockquote><p>检查配置</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MegaCli64 -LDInfo -LALL -aAll | grep RAID</span><br></pre></td></tr></table></figure><h1 id="创建JBOD"><a href="#创建JBOD" class="headerlink" title="创建JBOD"></a>创建JBOD</h1><blockquote><p>开启jbod模式</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MegaCli64 -AdpSetProp -EnableJBOD -1 -aALL</span><br></pre></td></tr></table></figure><blockquote><p>设置磁盘未JBOD</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MegaCli64  -PDMakeJBOD -PhysDrv[32:1] -a0</span><br></pre></td></tr></table></figure><blockquote><p>检查磁盘状态</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MegaCli64 -PDList -aALL | egrep <span class="string">&#x27;Firmware state&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="磁盘点灯"><a href="#磁盘点灯" class="headerlink" title="磁盘点灯"></a>磁盘点灯</h1><blockquote><p>对某个磁盘进行点灯操作</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/opt/MegaCli/MegaCli/MegaCli64 -PdLocate -start -physdrv[8:9] -a1</span><br></pre></td></tr></table></figure><blockquote><p>停止对某个磁盘进行点灯操作</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/opt/MegaCli/MegaCli/MegaCli64 -PdLocate -stop -physdrv[8:9] -a1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RAID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python调用Ansible API执行任务</title>
      <link href="/2023/05/11/Python%E8%B0%83%E7%94%A8Ansible%20API%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1/"/>
      <url>/2023/05/11/Python%E8%B0%83%E7%94%A8Ansible%20API%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="执行Ansible-Task"><a href="#执行Ansible-Task" class="headerlink" title="执行Ansible Task"></a>执行Ansible Task</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># ansible verison is 4.10.0 python version 3.6</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> (absolute_import, division, print_function)</span><br><span class="line">__metaclass__ = <span class="built_in">type</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ansible.executor.task_queue_manager <span class="keyword">import</span> TaskQueueManager</span><br><span class="line"><span class="keyword">from</span> ansible.module_utils.common.collections <span class="keyword">import</span> ImmutableDict</span><br><span class="line"><span class="keyword">from</span> ansible.inventory.manager <span class="keyword">import</span> InventoryManager</span><br><span class="line"><span class="keyword">from</span> ansible.parsing.dataloader <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> ansible.playbook.play <span class="keyword">import</span> Play</span><br><span class="line"><span class="keyword">from</span> ansible.<span class="built_in">vars</span>.manager <span class="keyword">import</span> VariableManager</span><br><span class="line"><span class="keyword">from</span> ansible <span class="keyword">import</span> context</span><br><span class="line"><span class="keyword">from</span> ansible.utils.display <span class="keyword">import</span> initialize_locale</span><br><span class="line"></span><br><span class="line">initialize_locale()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ansible.plugins.callback <span class="keyword">import</span> CallbackBase</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ResultsCollector</span>(<span class="title class_ inherited__">CallbackBase</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">super</span>(ResultsCollector, self).__init__(*args, **kwargs)</span><br><span class="line">        self.task_ok = &#123;&#125;</span><br><span class="line">        self.task_failed = &#123;&#125;</span><br><span class="line">        self.task_skipped = &#123;&#125;</span><br><span class="line">        self.task_status = &#123;&#125;</span><br><span class="line">        self.task_unreachable = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">v2_runner_on_ok</span>(<span class="params">self, result, *args, **kwargs</span>):</span><br><span class="line">        self.task_ok[result.task_name] = result._result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">v2_runner_on_failed</span>(<span class="params">self, result, *args, **kwargs</span>):</span><br><span class="line">        self.task_failed[result.task_name] = result._result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">v2_runner_on_skipped</span>(<span class="params">self, result, *args, **kwargs</span>):</span><br><span class="line">        self.task_skipped[result.task_name] = result._result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">v2_runner_on_status</span>(<span class="params">self, result, *args, **kwargs</span>):</span><br><span class="line">        self.task_status[result.task_name] = result._result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">v2_runner_on_unreachable</span>(<span class="params">self, result, *args, **kwargs</span>):</span><br><span class="line">        self.task_unreachable[result.task_name] = result._result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">ip,username,password</span>):</span><br><span class="line">    <span class="comment"># since the API is constructed for CLI it expects certain options to always be set in the context object</span></span><br><span class="line">    context.CLIARGS = ImmutableDict(connection=<span class="string">&#x27;smart&#x27;</span>, module_path=[<span class="string">&#x27;/to/mymodules&#x27;</span>, <span class="string">&#x27;/usr/share/ansible&#x27;</span>], forks=<span class="number">10</span>, become=<span class="literal">None</span>,</span><br><span class="line">                                    become_method=<span class="literal">None</span>, become_user=<span class="literal">None</span>, check=<span class="literal">False</span>, diff=<span class="literal">False</span>, verbosity=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># initialize needed objects</span></span><br><span class="line">    loader = DataLoader()  <span class="comment"># Takes care of finding and reading yaml, json and ini files</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Instantiate our ResultsCollectorJSONCallback for handling results as they come in. Ansible expects this to be one of its main display outlets</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># create inventory, use path to host config file as source or hosts in a comma separated string</span></span><br><span class="line">    inventory = InventoryManager(loader=loader, sources=<span class="string">&#x27;inventory/hosts&#x27;</span>)</span><br><span class="line">    <span class="comment"># add host to inventory</span></span><br><span class="line">    inventory.add_host(ip)</span><br><span class="line">    <span class="comment"># variable manager takes care of merging all the different sources to give you a unified view of variables available in each context</span></span><br><span class="line">    variable_manager = VariableManager(loader=loader, inventory=inventory)</span><br><span class="line">    variable_manager.set_host_variable(ip, <span class="string">&#x27;ansible_ssh_user&#x27;</span>, username)</span><br><span class="line">    variable_manager.set_host_variable(ip, <span class="string">&#x27;ansible_ssh_pass&#x27;</span>, password)</span><br><span class="line"></span><br><span class="line">    host_list = [i <span class="keyword">for</span> i <span class="keyword">in</span> inventory._inventory.hosts]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># instantiate task queue manager, which takes care of forking and setting up all objects to iterate over host list and tasks</span></span><br><span class="line">    <span class="comment"># IMPORTANT: This also adds library dirs paths to the module loader</span></span><br><span class="line">    <span class="comment"># IMPORTANT: and so it must be initialized before calling `Play.load()`.</span></span><br><span class="line">    result_callback = ResultsCollector()</span><br><span class="line">    tqm = TaskQueueManager(</span><br><span class="line"></span><br><span class="line">        inventory=inventory,</span><br><span class="line">        variable_manager=variable_manager,</span><br><span class="line">        loader=loader,</span><br><span class="line">        passwords=&#123;&#125;,</span><br><span class="line">        stdout_callback=result_callback</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># create data structure that represents our play, including tasks, this is basically what our YAML loader does internally.</span></span><br><span class="line">    play_source = <span class="built_in">dict</span>(</span><br><span class="line">        name=<span class="string">&quot;Ansible Play&quot;</span>,</span><br><span class="line">        hosts=host_list,</span><br><span class="line">        gather_facts=<span class="string">&#x27;yes&#x27;</span>,</span><br><span class="line">        tasks=[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;get ubuntu os version&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;shell&#x27;</span>: <span class="string">&quot;lsb_release -a | grep Description | awk -F &#x27;:&#x27; &#x27;&#123;gsub(/^[ \t]+/,\&quot;\&quot;,$2); print $2&#125;&#x27;&quot;</span>,</span><br><span class="line">                <span class="string">&#x27;register&#x27;</span>: <span class="string">&#x27;ubuntu_os_version&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;when&#x27;</span>: <span class="string">&quot;ansible_distribution == &#x27;Ubuntu&#x27;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;get redhat os version&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;shell&#x27;</span>: <span class="string">&quot;cat /etc/redhat-release&quot;</span>,</span><br><span class="line">                <span class="string">&#x27;register&#x27;</span>: <span class="string">&#x27;redhat_os_version&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;when&#x27;</span>: <span class="string">&quot;ansible_distribution == &#x27;RedHat&#x27;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;get hostname&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;shell&#x27;</span>: <span class="string">&#x27;hostname&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;register&#x27;</span>: <span class="string">&#x27;os_hostname&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;debug info&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;debug&#x27;</span>: &#123;</span><br><span class="line">                    <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;&#123;&#123; ubuntu_os_version.stdout | default(redhat_os_version.stdout) &#125;&#125;,&#123;&#123; os_hostname.stdout &#125;&#125;&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># Create play object, playbook objects use .load instead of init or new methods,</span></span><br><span class="line">    <span class="comment"># this will also automatically create the task objects from the info provided in play_source</span></span><br><span class="line">    play = Play().load(play_source, variable_manager=variable_manager, loader=loader)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Actually run it</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">       result = tqm.run(play)  <span class="comment"># most interesting data for a play is actually sent to the callback&#x27;s methods</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="comment">#we always need to cleanup child procs and the structures we use to communicate with them</span></span><br><span class="line">       tqm.cleanup()</span><br><span class="line">       <span class="keyword">if</span> loader:</span><br><span class="line">           loader.cleanup_all_tmp_files()</span><br><span class="line"></span><br><span class="line">    task_ok = result_callback.task_ok</span><br><span class="line">    task_failed = result_callback.task_failed</span><br><span class="line">    task_unreachable = result_callback.task_unreachable</span><br><span class="line">    <span class="keyword">if</span> task_ok:</span><br><span class="line">        <span class="keyword">del</span> task_ok[<span class="string">&#x27;Gathering Facts&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;result&#x27;</span>:<span class="string">&#x27;ok&#x27;</span>,<span class="string">&#x27;msg&#x27;</span>: task_ok&#125;</span><br><span class="line">    <span class="keyword">if</span> task_failed:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;result&#x27;</span>:<span class="string">&#x27;failed&#x27;</span>,<span class="string">&#x27;msg&#x27;</span>: task_failed&#125;</span><br><span class="line">    <span class="keyword">if</span> task_unreachable:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;result&#x27;</span>:<span class="string">&#x27;unreachable&#x27;</span>,<span class="string">&#x27;msg&#x27;</span>: task_unreachable&#125;</span><br></pre></td></tr></table></figure><h1 id="执行Ansible-Playbook"><a href="#执行Ansible-Playbook" class="headerlink" title="执行Ansible Playbook"></a>执行Ansible Playbook</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># ansible verison is 4.10.0 python version 3.6</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> (absolute_import, division, print_function)</span><br><span class="line">__metaclass__ = <span class="built_in">type</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ansible.executor.task_queue_manager <span class="keyword">import</span> TaskQueueManager</span><br><span class="line"><span class="keyword">from</span> ansible.module_utils.common.collections <span class="keyword">import</span> ImmutableDict</span><br><span class="line"><span class="keyword">from</span> ansible.inventory.manager <span class="keyword">import</span> InventoryManager</span><br><span class="line"><span class="keyword">from</span> ansible.parsing.dataloader <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> ansible.playbook.play <span class="keyword">import</span> Play</span><br><span class="line"><span class="keyword">from</span> ansible.<span class="built_in">vars</span>.manager <span class="keyword">import</span> VariableManager</span><br><span class="line"><span class="keyword">from</span> ansible <span class="keyword">import</span> context</span><br><span class="line"><span class="keyword">from</span> ansible.utils.display <span class="keyword">import</span> initialize_locale</span><br><span class="line"></span><br><span class="line">initialize_locale()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">host_vars</span>):</span><br><span class="line">    <span class="comment"># since the API is constructed for CLI it expects certain options to always be set in the context object</span></span><br><span class="line">    context.CLIARGS = ImmutableDict(connection=<span class="string">&#x27;smart&#x27;</span>, module_path=[<span class="string">&#x27;/to/mymodules&#x27;</span>, <span class="string">&#x27;/usr/share/ansible&#x27;</span>], forks=<span class="number">10</span>, become=<span class="literal">None</span>,</span><br><span class="line">                                    become_method=<span class="literal">None</span>, become_user=<span class="literal">None</span>, check=<span class="literal">False</span>, diff=<span class="literal">False</span>, verbosity=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># initialize needed objects</span></span><br><span class="line">    loader = DataLoader()  <span class="comment"># Takes care of finding and reading yaml, json and ini files</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Instantiate our ResultsCollectorJSONCallback for handling results as they come in. Ansible expects this to be one of its main display outlets</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># create inventory, use path to host config file as source or hosts in a comma separated string</span></span><br><span class="line">    inventory = InventoryManager(loader=loader, sources=<span class="string">&#x27;inventory/hosts&#x27;</span>)</span><br><span class="line">    <span class="comment"># add host to inventory</span></span><br><span class="line">    <span class="keyword">for</span> host,key,value <span class="keyword">in</span> host_vars:</span><br><span class="line">        inventory.add_host(host)</span><br><span class="line">        <span class="comment"># variable manager takes care of merging all the different sources to give you a unified view of variables available in each context</span></span><br><span class="line">        variable_manager = VariableManager(loader=loader, inventory=inventory)</span><br><span class="line">        variable_manager.set_host_variable(host, key, value)</span><br><span class="line"></span><br><span class="line">    host_list = [i <span class="keyword">for</span> i <span class="keyword">in</span> inventory._inventory.hosts]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># instantiate task queue manager, which takes care of forking and setting up all objects to iterate over host list and tasks</span></span><br><span class="line">    <span class="comment"># IMPORTANT: This also adds library dirs paths to the module loader</span></span><br><span class="line">    <span class="comment"># IMPORTANT: and so it must be initialized before calling `Play.load()`.</span></span><br><span class="line"></span><br><span class="line">    tqm = TaskQueueManager(</span><br><span class="line"></span><br><span class="line">        inventory=inventory,</span><br><span class="line">        variable_manager=variable_manager,</span><br><span class="line">        loader=loader,</span><br><span class="line">        passwords=&#123;&#125;,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># create data structure that represents our play, including tasks, this is basically what our YAML loader does internally.</span></span><br><span class="line">    play_source = <span class="built_in">dict</span>(</span><br><span class="line">        name=<span class="string">&quot;Ansible Play&quot;</span>,</span><br><span class="line">        hosts=host_list,</span><br><span class="line">        gather_facts=<span class="string">&#x27;no&#x27;</span>,</span><br><span class="line">        tasks=[</span><br><span class="line">            <span class="built_in">dict</span>(action=<span class="built_in">dict</span>(module=<span class="string">&#x27;shell&#x27;</span>, args=<span class="string">&#x27;ls&#x27;</span>), register=<span class="string">&#x27;shell_out&#x27;</span>),</span><br><span class="line">            <span class="built_in">dict</span>(action=<span class="built_in">dict</span>(module=<span class="string">&#x27;debug&#x27;</span>, args=<span class="built_in">dict</span>(msg=<span class="string">&#x27;&#123;&#123;shell_out.stdout&#125;&#125;&#x27;</span>))),</span><br><span class="line">            <span class="built_in">dict</span>(action=<span class="built_in">dict</span>(module=<span class="string">&#x27;command&#x27;</span>, args=<span class="built_in">dict</span>(cmd=<span class="string">&#x27;/usr/bin/uptime&#x27;</span>))),</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Create play object, playbook objects use .load instead of init or new methods,</span></span><br><span class="line">    <span class="comment"># this will also automatically create the task objects from the info provided in play_source</span></span><br><span class="line">    play = Play().load(play_source, variable_manager=variable_manager, loader=loader)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Actually run it</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">       result = tqm.run(play)  <span class="comment"># most interesting data for a play is actually sent to the callback&#x27;s methods</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="comment">#we always need to cleanup child procs and the structures we use to communicate with them</span></span><br><span class="line">       tqm.cleanup()</span><br><span class="line">       <span class="keyword">if</span> loader:</span><br><span class="line">           loader.cleanup_all_tmp_files()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Remove ansible tmpdir</span></span><br><span class="line">   <span class="comment"># shutil.rmtree(C.DEFAULT_LOCAL_TMP, True)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    host_vars = [(<span class="string">&#x27;192.168.1.10&#x27;</span>,<span class="string">&#x27;ansible_ssh_pass&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>),(<span class="string">&#x27;192.168.1.11&#x27;</span>,<span class="string">&#x27;ansible_ssh_pass&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>)]</span><br><span class="line">    main(host_vars)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>request模块封装API</title>
      <link href="/2023/05/11/request%E6%A8%A1%E5%9D%97%E5%B0%81%E8%A3%85API/"/>
      <url>/2023/05/11/request%E6%A8%A1%E5%9D%97%E5%B0%81%E8%A3%85API/</url>
      
        <content type="html"><![CDATA[<h1 id="基于Session认证"><a href="#基于Session认证" class="headerlink" title="基于Session认证"></a>基于Session认证</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="基于Cookie认证"><a href="#基于Cookie认证" class="headerlink" title="基于Cookie认证"></a>基于Cookie认证</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.DEBUG,<span class="built_in">format</span>=<span class="string">&quot;%(asctime)s  %(levelname)s  %(message)s&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">API</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, host, username, password</span>):</span><br><span class="line">        self.user = username</span><br><span class="line">        self.host = host</span><br><span class="line">        self.data = &#123; <span class="string">&#x27;username&#x27;</span>: username, <span class="string">&#x27;password&#x27;</span>: self.generatePassword(password) &#125;</span><br><span class="line">        self.url = <span class="string">f&#x27;http://<span class="subst">&#123;host&#125;</span>&#x27;</span></span><br><span class="line">        self.login_url = <span class="string">f&#x27;http://<span class="subst">&#123;host&#125;</span>/login/&#x27;</span></span><br><span class="line">        self._session = requests.Session()</span><br><span class="line">        self._cookie = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self._cookie:</span><br><span class="line">            self.login()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self._cookie:</span><br><span class="line">            self._session.cookies.update(self._cookie)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generatePassword</span>(<span class="params">self,password</span>):</span><br><span class="line">        md5 = hashlib.md5()</span><br><span class="line">        md5.update(password.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> md5.hexdigest()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">self</span>):</span><br><span class="line">        response = requests.post(url=self.login_url, data=self.data)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            logging.debug(<span class="string">f&quot;用户<span class="subst">&#123;self.user&#125;</span>登录成功&quot;</span>)</span><br><span class="line">            self._cookie = &#123; <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;&#x27;</span>.join(response.cookies.values()) &#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logging.error(<span class="string">f&quot;用户<span class="subst">&#123;self.user&#125;</span>或密码错误&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self._cookie</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Requests </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible教程</title>
      <link href="/2023/05/10/ansible%E6%95%99%E7%A8%8B/"/>
      <url>/2023/05/10/ansible%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="安装ansible"><a href="#安装ansible" class="headerlink" title="安装ansible"></a>安装ansible</h1><h2 id="yum方式安装"><a href="#yum方式安装" class="headerlink" title="yum方式安装"></a>yum方式安装</h2><p>导入阿里云epel yum源</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">wget http://mirrors.aliyun.com/repo/epel-7.repo</span><br></pre></td></tr></table></figure><p>安装repo</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install ansible python2-pip</span><br></pre></td></tr></table></figure><h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><h2 id="authorized-key"><a href="#authorized-key" class="headerlink" title="authorized_key"></a>authorized_key</h2><blockquote><p>管理用户authorized_keys实现免密登陆</p></blockquote><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">comment</td><td align="left">更改公钥注释</td></tr><tr><td align="left">exclusive</td><td align="left">添加或删除authorized_keys</td></tr><tr><td align="left">key</td><td align="left">指定公钥</td></tr><tr><td align="left">path</td><td align="left">指定authorized_keys路径</td></tr><tr><td align="left">state</td><td align="left">如果是present则创建，如果是absent则删除</td></tr><tr><td align="left">user</td><td align="left">指定用户名称</td></tr></tbody></table><blockquote><p>配置节点k8s用户互信</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config</span> <span class="string">k8s</span> <span class="string">user</span> <span class="string">account</span></span><br><span class="line">  <span class="attr">authorized_key:</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">k8s</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; lookup(&#x27;file&#x27;, &#x27;/home/k8s/.ssh/id_rsa.pub&#x27;) &#125;&#125;</span>&quot;</span></span><br><span class="line">    <span class="attr">exclusive:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="command模块"><a href="#command模块" class="headerlink" title="command模块"></a>command模块</h2><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">creates</td><td align="left">一个文件名，当该文件存在则命令不执行</td></tr><tr><td align="left">free_form</td><td align="left">要执行的Linux指令</td></tr><tr><td align="left">chdir</td><td align="left">在执行指令之前，先切换到该指定的目录</td></tr><tr><td align="left">removes</td><td align="left">一个文件名，如果文件不存在，则该选项不执行</td></tr><tr><td align="left">state</td><td align="left">如果是present则创建，如果是absent则删除</td></tr><tr><td align="left">user</td><td align="left">指定用户名称</td></tr></tbody></table><h2 id="copy模块"><a href="#copy模块" class="headerlink" title="copy模块"></a>copy模块</h2><p>参数</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">src</td><td align="left">源文件</td></tr><tr><td align="left">dest</td><td align="left">目标路径</td></tr><tr><td align="left">backup</td><td align="left">覆盖前是否备份原文件</td></tr><tr><td align="left">owner</td><td align="left">设置文件目录的属主</td></tr><tr><td align="left">group</td><td align="left">设置文件目录的属组</td></tr><tr><td align="left">mode</td><td align="left">设置文件目录的权限</td></tr></tbody></table><h2 id="cron模块"><a href="#cron模块" class="headerlink" title="cron模块"></a>cron模块</h2><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">backup</td><td align="left">对远程主机上原任务计划内容修改之前备份</td></tr><tr><td align="left">day</td><td align="left">日</td></tr><tr><td align="left">hour</td><td align="left">小时</td></tr><tr><td align="left">minute</td><td align="left">分钟</td></tr><tr><td align="left">month</td><td align="left">月</td></tr><tr><td align="left">weekday</td><td align="left">周</td></tr><tr><td align="left">job</td><td align="left">要执行的文件，依赖于state=present</td></tr><tr><td align="left">name</td><td align="left">该任务的描述</td></tr><tr><td align="left">special_time</td><td align="left">指定什么时候执行（参数：reboot、yearly、annually、monthly、weekly、daily、hourly）</td></tr><tr><td align="left">state</td><td align="left">确认该任务计划是创建还是删除</td></tr><tr><td align="left">user</td><td align="left">以哪个用户的身份执行</td></tr></tbody></table><blockquote><p>创建一个计划任务</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Create</span> <span class="string">cron</span> <span class="string">job</span></span><br><span class="line">  <span class="attr">cron:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cron_test</span></span><br><span class="line">    <span class="attr">minute:</span> <span class="string">&quot;*/3&quot;</span></span><br><span class="line">    <span class="attr">hour:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">    <span class="attr">day:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">    <span class="attr">month:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">    <span class="attr">weekday:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">    <span class="attr">job:</span> <span class="string">&quot;/usr/sbin/ntpdate cn.ntp.org.cn&quot;</span></span><br></pre></td></tr></table></figure><h2 id="docker-container模块"><a href="#docker-container模块" class="headerlink" title="docker_container模块"></a>docker_container模块</h2><table><thead><tr><th>参数</th><th>可选项</th><th>描述</th></tr></thead><tbody><tr><td>command</td><td></td><td>容器启动时执行的命令可以是字符串，也可以是列表</td></tr><tr><td>hostname</td><td></td><td>容器hostname</td></tr><tr><td>image</td><td></td><td>容器镜像</td></tr><tr><td>name</td><td></td><td>容器名称</td></tr><tr><td>env</td><td></td><td>容器环境变量</td></tr><tr><td>network_mode</td><td>bridge、host、none</td><td>容器的网络模式</td></tr><tr><td>pull</td><td></td><td>下载镜像到本地</td></tr><tr><td>read_only</td><td></td><td>挂载容器根文件系统为只读</td></tr><tr><td>restart</td><td></td><td>重启容器</td></tr><tr><td>restart_policy</td><td>no、on-failure、always、unless-stopped</td><td>重启容器策略</td></tr><tr><td>state</td><td>absent、present、stopped、started</td><td>容器运行状态</td></tr><tr><td>volume_driver</td><td></td><td>volume driver</td></tr><tr><td>volumes</td><td></td><td>容器共享宿主机的目录，例如：volumes: /opt:container:/opt</td></tr></tbody></table><blockquote><p>创建容器</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">start</span> <span class="string">docker</span> <span class="string">registry</span></span><br><span class="line">  <span class="attr">docker_container:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">registry</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry:2</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="number">4000</span><span class="string">:5000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">started</span></span><br><span class="line">    <span class="attr">restart_policy:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/t2cp:/var/lib/registry</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/test:/etc/test</span></span><br></pre></td></tr></table></figure><blockquote><p>重启容器</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">restart</span> <span class="string">docker</span> <span class="string">registry</span></span><br><span class="line">  <span class="attr">docker_container:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">registry</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry:2</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">restarted</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="attr">ports:</span> <span class="number">4000</span><span class="string">:5000</span></span><br></pre></td></tr></table></figure><h2 id="file模块"><a href="#file模块" class="headerlink" title="file模块"></a>file模块</h2><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">group</td><td align="left">定义文件/目录属组</td></tr><tr><td align="left">owner</td><td align="left">定义文件目录属主</td></tr><tr><td align="left">mode</td><td align="left">定义文件目录的权限</td></tr><tr><td align="left">owner</td><td align="left">设置文件目录的属主</td></tr><tr><td align="left">path</td><td align="left">定义文件目录的路径</td></tr><tr><td align="left">recurse</td><td align="left">递归设置文件的属性，只对目录有效</td></tr><tr><td align="left">state</td><td align="left">定义文件状态（state状态有三个选项directory：如果目录不存在则创建、touch：如果文件不存在则创建、absent：删除文件或目录）</td></tr></tbody></table><h2 id="fetch模块"><a href="#fetch模块" class="headerlink" title="fetch模块"></a>fetch模块</h2><p>从远程主机复制文件到本地</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>src</td><td>源文件</td></tr><tr><td>dest</td><td>目标文件</td></tr><tr><td>flat</td><td>如果dest的路径以/结尾保存在相对路径目录下</td></tr></tbody></table><blockquote><p>目标节点拉取配置文件到ansible节点</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">copy</span> <span class="string">ceph</span> <span class="string">config</span> <span class="string">to</span> <span class="string">tmp</span> <span class="string">dir</span></span><br><span class="line">  <span class="attr">fetch:</span></span><br><span class="line">    <span class="attr">src:</span> <span class="string">/tmp/ceph.conf</span></span><br><span class="line">    <span class="attr">dest:</span> <span class="string">/tmp/ceph.conf</span></span><br><span class="line">    <span class="attr">flat:</span> <span class="literal">yes</span></span><br></pre></td></tr></table></figure><h2 id="find模块"><a href="#find模块" class="headerlink" title="find模块"></a>find模块</h2><p>find模块可以帮助我们在远程主机查找符合条件的文件，类似与linux操作系统find命令。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>paths</td><td>指定文件路径，可以指定多个路径，路径间用逗号隔开</td></tr><tr><td>recurse</td><td>当 recurse 参数设置为 yes 时，表示在指定目录中递归的查找文件</td></tr><tr><td>hidden</td><td>当 hidden 参数的值设置为 yes 时，才会查找隐藏文件</td></tr><tr><td>file_type</td><td>指定查找文件类型，可指定的文件类型有 any、directory、file、link 四种</td></tr><tr><td>contains</td><td>根据文章内容查找文件，此参数的值为一个正则表达式，find 模块会根据对应的正则表达式匹配文件内容。</td></tr><tr><td>age</td><td>根据时间范围查找文件，可以使用的单位有秒(s)、分(m)、时(h)、天(d)、星期(w)</td></tr><tr><td>age_stamp</td><td>文件的时间属性有三种，atime、ctime、mtime，当我们根据时间范围查找文件时，可以指定以哪个时间种类</td></tr><tr><td>size</td><td>指定查找文件的大小，可以使用的单位有 t、g、m、k、b</td></tr></tbody></table><h2 id="group模块"><a href="#group模块" class="headerlink" title="group模块"></a>group模块</h2><p>用户组管理</p><table><thead><tr><th>名称</th><th>值</th></tr></thead><tbody><tr><td><code>name</code></td><td>用户名</td></tr><tr><td><code>state</code></td><td>创建或删除</td></tr><tr><td><code>groups</code></td><td>用户组</td></tr><tr><td><code>uid</code></td><td>用户UID</td></tr><tr><td><code>password</code></td><td>用户密码</td></tr><tr><td><code>home</code></td><td>指定家目录，需要<code>createhome</code>为<code>yes</code></td></tr><tr><td><code>createhome</code></td><td>是否创建家目录</td></tr><tr><td><code>system</code></td><td>是否创建为系统用户</td></tr><tr><td><code>remove</code></td><td>当<code>state=absent</code>时，删除家目录</td></tr><tr><td><code>shell</code></td><td>指定用户shell环境</td></tr></tbody></table><blockquote><p>创建用户组</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Create</span> <span class="string">a</span> <span class="string">group</span> <span class="string">named</span> <span class="string">acai</span> <span class="string">with</span> <span class="string">a</span> <span class="string">GID</span> <span class="string">of</span> <span class="number">2016</span></span><br><span class="line">  <span class="attr">group:</span></span><br><span class="line">    <span class="attr">gid:</span> <span class="number">2016</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">acai</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Create</span> <span class="string">user</span> <span class="string">test_user</span> <span class="string">and</span> <span class="string">add</span> <span class="string">to</span> <span class="string">acai</span> <span class="string">group</span></span><br><span class="line">  <span class="attr">user:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">test_user</span></span><br><span class="line">    <span class="attr">groups:</span> <span class="string">acai</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">present</span></span><br></pre></td></tr></table></figure><h2 id="lineinfile模块"><a href="#lineinfile模块" class="headerlink" title="lineinfile模块"></a>lineinfile模块</h2><p>该模块用于从一个文件中搜索一行，确保该行存在或删除该行。lineinfile模块主要用于改变一个文件的一行。如果想要改变文件中相似的多行，可以使用replace模块。如果想要插入/更新/删除一个行块，可以使用blockinfile模块。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>backup</td><td>用于创建一个包含时间戳信息的备份文件。以便在错误的修改了文件的时候，能够找回原始的文件。</td></tr><tr><td>create</td><td>与state=present一起使用。如果指定了这个参数，当要修改的文件不存在的时候，会创建它。否则会报错。</td></tr><tr><td>dest</td><td>要修改的文件</td></tr><tr><td>insertbefore</td><td>当regexp不匹配文件中的任何行的时候，会将line参数所指定的行，插入到insertbefore所指定的正则表达式匹配的行中的最后一行的前面，当insertbefore所指定的正则表达式不匹配任何行时，会插入到文件的末尾</td></tr><tr><td>insertafter</td><td>与insertbefore类似，不同的是，insertbefore会将新行插入到其所指定的正则表达式匹配的行中的最后一行的前面，而insertafter是插入到后面。</td></tr><tr><td>line</td><td>要插入或者替换的行。如果设置了backrefs参数，那么line中可以包含 位置分组 或 命名分组，lineinfile模块会使用regexp捕获的分组填充它们。</td></tr><tr><td>mode</td><td>用来指定文件的权限，比如mode=0644 或 mode=’a+x’</td></tr><tr><td>owner 和 group</td><td>用来指定文件的属主 和 属组</td></tr><tr><td>regexp</td><td>用于搜索文件中的每一行的正则表达式。对于state=present，这个正则表达式所匹配的行中的最后一行会被替换；对于state=present，会删除所有匹配的行。</td></tr><tr><td>state</td><td>用于设置 新增或替换一行，还是删除行</td></tr></tbody></table><blockquote><p>删除password文件开头为root的行</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">delete</span> <span class="string">line</span> <span class="string">for</span> <span class="string">root</span> <span class="string">in</span> <span class="string">password</span></span><br><span class="line">  <span class="attr">lineinfile:</span></span><br><span class="line">    <span class="attr">dest:</span> <span class="string">&#x27;/etc/password&#x27;</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">absent</span></span><br><span class="line">    <span class="attr">regexp:</span> <span class="string">&#x27;^root&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>关闭selinux</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">disable</span> <span class="string">selinux</span></span><br><span class="line">  <span class="attr">lineinfile:</span></span><br><span class="line">    <span class="attr">dest:</span> <span class="string">&#x27;/etc/selinux/config&#x27;</span></span><br><span class="line">    <span class="attr">regexp:</span> <span class="string">&#x27;^SELINUX=.*&#x27;</span></span><br><span class="line">    <span class="attr">line:</span> <span class="string">&#x27;SELINUX=disabled&#x27;</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">present</span></span><br></pre></td></tr></table></figure><blockquote><p>添加hosts解析</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">add</span> <span class="string">hosts</span></span><br><span class="line">  <span class="attr">lineinfile:</span></span><br><span class="line">    <span class="attr">dest:</span> <span class="string">&#x27;/etc/hosts&#x27;</span></span><br><span class="line">    <span class="attr">line:</span> <span class="string">&#x27;172.16.1.10\ttest&#x27;</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">present</span></span><br></pre></td></tr></table></figure><h2 id="get-url模块"><a href="#get-url模块" class="headerlink" title="get_url模块"></a>get_url模块</h2><blockquote><p>下载文件到/tmp</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">download</span> <span class="string">file</span> <span class="string">to</span> <span class="string">/tmp</span> <span class="string">directory</span></span><br><span class="line">  <span class="attr">get_url:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&#x27;http://mirrors.aliyun.com/centos/timestamp.txt&#x27;</span></span><br><span class="line">    <span class="attr">dest:</span> <span class="string">&#x27;/tmp&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="mysql-db模块"><a href="#mysql-db模块" class="headerlink" title="mysql_db模块"></a>mysql_db模块</h2><blockquote><p>导入sql</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">import</span> <span class="string">register.sql</span> <span class="string">for</span> <span class="string">harbor</span> </span><br><span class="line">  <span class="attr">mysql_db:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; mysql_db_name &#125;&#125;</span>&quot;</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">import</span></span><br><span class="line">    <span class="attr">target:</span> <span class="string">/tmp/registry.sql</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">inventory_hostname</span> <span class="string">in</span> <span class="string">groups[&#x27;harbor_nodes&#x27;][0]</span></span><br></pre></td></tr></table></figure><blockquote><p>创建数据库</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">create</span> <span class="string">database</span> <span class="string">for</span> <span class="string">harbor</span></span><br><span class="line">  <span class="attr">mysql_db:</span></span><br><span class="line">     <span class="attr">name:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; mysql_db_name &#125;&#125;</span>&quot;</span></span><br><span class="line">     <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line">  <span class="attr">run_once:</span> <span class="literal">yes</span></span><br></pre></td></tr></table></figure><h2 id="mysql-user模块"><a href="#mysql-user模块" class="headerlink" title="mysql_user模块"></a>mysql_user模块</h2><table><thead><tr><th>参数</th><th>可选值</th><th>描述</th></tr></thead><tbody><tr><td>append_privs</td><td></td><td>用户添加权限，不会覆盖原有权限</td></tr><tr><td>config_file</td><td></td><td>指定user和passwd配置文件</td></tr><tr><td>connect_timeout</td><td></td><td>连接数据库超时时间</td></tr><tr><td>host</td><td></td><td>mysql的IP或是主机名称</td></tr><tr><td>login_host</td><td></td><td>登陆mysql的主机名称</td></tr><tr><td>login_password</td><td></td><td>登陆mysql的用户密码</td></tr><tr><td>login_user</td><td></td><td>登陆mysql的用户</td></tr><tr><td>state</td><td>present/absent</td><td></td></tr><tr><td>name</td><td></td><td>用户名</td></tr><tr><td>password</td><td></td><td>密码</td></tr><tr><td>priv</td><td></td><td>访问权限</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><blockquote><p>创建mysql远程用户</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">create</span> <span class="string">harbor</span> <span class="string">remote</span> <span class="string">user</span> <span class="string">for</span> <span class="string">mysql</span> <span class="string">database</span></span><br><span class="line">  <span class="attr">mysql_user:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; mysql_harbor_user &#125;&#125;</span>&quot;</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; mysql_harbor_pass &#125;&#125;</span>&quot;</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">&quot;%&quot;</span></span><br><span class="line">    <span class="attr">priv:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; mysql_db_name &#125;&#125;</span>.*:ALL&quot;</span></span><br><span class="line">    <span class="attr">append_privs:</span> <span class="string">&quot;yes&quot;</span></span><br><span class="line">  <span class="attr">run_once:</span> <span class="literal">yes</span></span><br></pre></td></tr></table></figure><h2 id="systemd模块"><a href="#systemd模块" class="headerlink" title="systemd模块"></a>systemd模块</h2><p>systemd模块就是使用systemctl来管理centos7系统服务</p><table><thead><tr><th>参数名称</th><th>可选值</th><th>备注</th></tr></thead><tbody><tr><td>name</td><td>yes/no</td><td>服务名称</td></tr><tr><td>enabled</td><td>yes/no</td><td>是否设置开机启动</td></tr><tr><td>state</td><td>started、stopped、restarted、reload</td><td>对服务执行的动作</td></tr></tbody></table><h2 id="service模块"><a href="#service模块" class="headerlink" title="service模块"></a>service模块</h2><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>enabled</td><td>是否开机启动 yes/no</td></tr><tr><td>name</td><td>服务名称</td></tr><tr><td>runlevel</td><td>运行级别</td></tr><tr><td>sleep</td><td>如果执行了restarted，在stop和start之间沉睡几秒</td></tr><tr><td>state</td><td>对服务执行启动，停止，重启，重新加载等</td></tr></tbody></table><blockquote><p>启动apache服务设置开机自动启动</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">startup</span> <span class="string">apache</span> <span class="string">service</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">httpd</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">started</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">yes</span></span><br></pre></td></tr></table></figure><h2 id="stat模块"><a href="#stat模块" class="headerlink" title="stat模块"></a>stat模块</h2><p>索引文件、目录的状态</p><table><thead><tr><th align="left">参数</th><th align="left">可选项</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">path</td><td align="left"></td><td align="left">文件、目录路径</td></tr></tbody></table><p>返回值</p><table><thead><tr><th align="left">参数</th><th align="left">可选项</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">atime</td><td align="left"></td><td align="left">返回最后一次访问文件的时间</td></tr><tr><td align="left">attributes</td><td align="left"></td><td align="left">返回属性</td></tr><tr><td align="left">exists</td><td align="left"></td><td align="left">路径是否存在</td></tr><tr><td align="left">ischr</td><td align="left"></td><td align="left">返回是否为设备</td></tr><tr><td align="left">isdir</td><td align="left"></td><td align="left">返回是否为目录</td></tr><tr><td align="left">islnk</td><td align="left"></td><td align="left">返回是否为链接</td></tr><tr><td align="left">isuid</td><td align="left"></td><td align="left">返回uid</td></tr><tr><td align="left">mode</td><td align="left"></td><td align="left">返回文件权限</td></tr><tr><td align="left">mtime</td><td align="left"></td><td align="left">返回最后修改时间</td></tr><tr><td align="left">readable</td><td align="left"></td><td align="left">返回是否有可读权限</td></tr><tr><td align="left">size</td><td align="left"></td><td align="left">返回文件字节大小</td></tr></tbody></table><h2 id="template模块"><a href="#template模块" class="headerlink" title="template模块"></a>template模块</h2><p>template使用了Jinjia2格式作为文件模版，进行文档内变量的替换的模块。</p><table><thead><tr><th align="left">参数</th><th align="left">可选项</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">backup</td><td align="left">yes/no</td><td align="left"></td></tr><tr><td align="left">src</td><td align="left"></td><td align="left">文件源地址</td></tr><tr><td align="left">dest</td><td align="left"></td><td align="left">文件目的地址</td></tr><tr><td align="left">mode</td><td align="left"></td><td align="left">设置远程节点上的template文件权限。类似Linux中chmod的用法</td></tr><tr><td align="left">owner</td><td align="left"></td><td align="left">设置远程节点上的template文件所属用户</td></tr><tr><td align="left">group</td><td align="left"></td><td align="left">设置远程节点上的的template文件的所属用户组</td></tr></tbody></table><blockquote><p>创建chrony.conf.j2模版</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">allow &#123;&#123; cluster_network &#125;&#125;</span><br></pre></td></tr></table></figure><p>在templates目录下创建chrony.conf.j2文件并替换以下变量<br>allow </p> 代表是由ansible引入的一个变量，该变量可在group_vars目录下文件中调用，eg：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> group_vars/all </span><br><span class="line">---</span><br><span class="line"><span class="comment">#k8s cluster api network</span></span><br><span class="line"><span class="comment">#eg: cluster_network : 192.168.1.0/24</span></span><br><span class="line">cluster_network : 192.168.1.0/24</span><br></pre></td></tr></table></figure><p>当ansible执行该任务后，被copy的配置文件会被替换为cluster_network变量的值。</p><h2 id="user模块"><a href="#user模块" class="headerlink" title="user模块"></a>user模块</h2><table><thead><tr><th>参数</th><th>可选值</th><th>描述</th></tr></thead><tbody><tr><td>append</td><td>yes/no</td><td></td></tr><tr><td>comment</td><td></td><td></td></tr><tr><td>create_home</td><td>yes/no</td><td></td></tr><tr><td>expires</td><td></td><td></td></tr></tbody></table><h2 id="wait-for模块"><a href="#wait-for模块" class="headerlink" title="wait_for模块"></a>wait_for模块</h2><p>当我们启动一个服务或是执行某条shell的时候，你想确认下服务或是shell是否执行成功。这时候就需要使用wait_for模块。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>connect_timeout</td><td>在下一个事情发生前等待连接的时间</td></tr><tr><td>delay</td><td>延时</td></tr><tr><td>host</td><td>执行模块的host</td></tr><tr><td>path</td><td>当一个文件存在时，继续下一步</td></tr><tr><td>port</td><td>监测端口</td></tr><tr><td>state</td><td>started 当对象是端口的时候确保端口是打开的；对象是文件时，确认文件是否存在<br />stopped 对象是端口的时候确保端口是关闭的；<br />present 对象是文件的时候确保文件是存在的；<br />absent 对象是文件的时候确保文件是不存在的</td></tr><tr><td></td><td></td></tr></tbody></table><blockquote><p>检查某个节点端口是否正常访问</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">check</span> <span class="string">nginx</span> <span class="string">port</span> <span class="string">for</span> <span class="string">yum</span> <span class="string">repo</span></span><br><span class="line">  <span class="attr">wait_for:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; yum_port &#125;&#125;</span>&quot;</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; deploy_node_address &#125;&#125;</span>&quot;</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">started</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">run_once:</span> <span class="literal">yes</span></span><br></pre></td></tr></table></figure><h2 id="yum模块"><a href="#yum模块" class="headerlink" title="yum模块"></a>yum模块</h2><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>enablerepo</td><td>激活yum源</td></tr><tr><td>name</td><td>要操作软件包的名字，也可以传递一个url和本地路径</td></tr><tr><td>state</td><td>定义软件包的状态（present：安装、absent：删除、latest：安装最新的）</td></tr></tbody></table><blockquote><p>安装apache服务</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">apache</span></span><br><span class="line">  <span class="attr">yum:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">httpd</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">present</span></span><br></pre></td></tr></table></figure><h1 id="ansible-filter"><a href="#ansible-filter" class="headerlink" title="ansible filter"></a>ansible filter</h1><p>当涉及到 Ansible 的 Filter 时，有一些内置 Filter 是很常用的。下面是一些常见的 Filter：</p><table><thead><tr><th>Filter 名称</th><th>作用</th></tr></thead><tbody><tr><td><code>abs</code></td><td>返回一个数字的绝对值</td></tr><tr><td><code>basename</code></td><td>返回一个路径的最后一部分</td></tr><tr><td><code>bool</code></td><td>返回一个布尔值</td></tr><tr><td><code>default</code></td><td>如果变量未定义或为空，则返回一个默认值</td></tr><tr><td><code>difference</code></td><td>返回两个列表之间的差异</td></tr><tr><td><code>filesizeformat</code></td><td>格式化字节大小，如 1MB</td></tr><tr><td><code>first</code></td><td>返回列表的第一个元素</td></tr><tr><td><code>from_json</code></td><td>将 JSON 字符串转换为 Python 对象</td></tr><tr><td><code>from_yaml</code></td><td>将 YAML 字符串转换为 Python 对象</td></tr><tr><td><code>join</code></td><td>将列表中的元素连接为一个字符串</td></tr><tr><td><code>last</code></td><td>返回列表的最后一个元素</td></tr><tr><td><code>length</code></td><td>返回列表、字典或字符串的长度</td></tr><tr><td><code>lower</code></td><td>将字符串转换为小写</td></tr><tr><td><code>max</code></td><td>返回列表中的最大值</td></tr><tr><td><code>min</code></td><td>返回列表中的最小值</td></tr><tr><td><code>random</code></td><td>返回列表中的随机元素</td></tr><tr><td><code>reject</code></td><td>返回列表中不满足指定条件的元素</td></tr><tr><td><code>replace</code></td><td>将字符串中的一个子串替换为另一个子串</td></tr><tr><td><code>select</code></td><td>返回列表中满足指定条件的元素</td></tr><tr><td><code>sort</code></td><td>对列表进行排序</td></tr><tr><td><code>sum</code></td><td>返回列表中所有数字的和</td></tr><tr><td><code>to_json</code></td><td>将 Python 对象转换为 JSON 字符串</td></tr><tr><td><code>to_yaml</code></td><td>将 Python 对象转换为 YAML 字符串</td></tr><tr><td><code>trim</code></td><td>移除字符串开头和结尾的空白字符</td></tr><tr><td><code>union</code></td><td>返回两个列表的并集</td></tr><tr><td><code>unique</code></td><td>返回一个列表中的唯一元素</td></tr><tr><td><code>upper</code></td><td>将字符串转换为大写</td></tr><tr><td><code>urlencode</code></td><td>对字符串进行 URL 编码</td></tr><tr><td><code>version</code></td><td>将版本号字符串转换为可比较的形式</td></tr></tbody></table><blockquote><p>将字符串开头和结尾的空格去除</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">debug</span> <span class="string">k8s</span> <span class="string">cluster</span> <span class="string">system</span> <span class="string">id</span></span><br><span class="line">  <span class="attr">debug:</span></span><br><span class="line">    <span class="attr">msg:</span> <span class="string">&quot;k8s cluster System Id is: <span class="template-variable">&#123;&#123; System_Id.stdout|trim &#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>替换字符串，将192.168.1.1替换为192-168-1-1</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">get</span> <span class="string">kube</span> <span class="string">etcd</span> <span class="string">pem</span> <span class="string">for</span> <span class="string">prometheus</span></span><br><span class="line">  <span class="attr">command:</span> <span class="string">cat</span> <span class="string">/etc/kubernetes/ssl/kube-etcd-&#123;&#123;</span> <span class="string">hostvars[inventory_hostname][&#x27;ansible_&#x27;</span> <span class="string">+</span> <span class="string">api_interface][&#x27;ipv4&#x27;][&#x27;address&#x27;]</span> <span class="string">|</span> <span class="string">regex_replace(&#x27;\.&#x27;,</span> <span class="string">&#x27;-&#x27;</span><span class="string">)</span> <span class="string">&#125;&#125;.pem</span></span><br><span class="line">  <span class="attr">register:</span> <span class="string">kube_etcd_pem</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">inventory_hostname</span> <span class="string">in</span>  <span class="string">groups[&#x27;cp_control&#x27;][0]</span> </span><br></pre></td></tr></table></figure><h1 id="ansible判断"><a href="#ansible判断" class="headerlink" title="ansible判断"></a>ansible判断</h1><table><thead><tr><th>判断类型</th><th>描述</th></tr></thead><tbody><tr><td>when</td><td>在任务运行之前用于评估是否需要运行任务</td></tr><tr><td>assert</td><td>如果表达式不为真，则任务失败</td></tr><tr><td>failed_when</td><td>当一个任务的返回码符合给定的条件时，将标记任务失败</td></tr><tr><td>changed_when</td><td>如果命令的执行返回值符合给定的条件，则将结果标记为已更改</td></tr></tbody></table><h2 id="when"><a href="#when" class="headerlink" title="when"></a>when</h2><blockquote><p>when条件判断：只条满足when的条件时才执行对应的tasks</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span> <span class="string">host</span> <span class="string">IP</span> <span class="string">address</span></span><br><span class="line">    <span class="attr">debug:</span> <span class="string">&#x27;msg=&quot;<span class="template-variable">&#123;&#123; ansible_default_ipv4.address &#125;&#125;</span>&quot;&#x27;</span></span><br><span class="line">    <span class="attr">when:</span> <span class="string">ansible_default_ipv4.address</span> <span class="string">==</span> <span class="string">&quot;192.168.1.11&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>判断chrony配置文件是否存在，如果存在则跳过；如果不存在则复制配置文件</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">chrony</span> <span class="string">check</span> <span class="string">is</span> <span class="string">exits</span></span><br><span class="line">  <span class="attr">stat:</span> <span class="string">path=/etc/chrony.conf.bak</span></span><br><span class="line">  <span class="attr">register:</span> <span class="string">chrony_conf_status</span></span><br><span class="line">  <span class="comment">#先用register获取chrony.conf.bak文件的状态</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">backup</span> <span class="string">chrony</span> <span class="string">conf</span></span><br><span class="line">  <span class="attr">copy:</span> <span class="string">src=/etc/chrony.conf</span> <span class="string">dest=/etc/chrony.conf.bak</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">chrony_conf_status.stat.exists</span> <span class="string">==</span> <span class="literal">False</span></span><br><span class="line">  <span class="comment">#判断配置文件是否存在如果存在则不执行该task</span></span><br></pre></td></tr></table></figure><blockquote><p>定义变量判断：</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cloudkitty_hashmaps:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; cloudkitty_hashmaps_cp if deloy_cp_region is defined and deploy_cp_region|bool  else cloudkitty_hashmaps_os &#125;&#125;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>判断regsiter变量的值，如果两个节点及以上register变量相等，则执行task</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mariadb</span> <span class="string">galera</span> <span class="string">cluster</span> <span class="string">first</span> <span class="string">startup</span></span><br><span class="line">  <span class="attr">shell:</span> <span class="string">galera_new_cluster</span> <span class="string">&gt;&gt;/dev/null</span></span><br><span class="line">  <span class="attr">ignore_errors:</span> <span class="literal">yes</span></span><br><span class="line">  <span class="attr">when:</span> &#123;&#123; <span class="string">safe_to_bootstrap.stdout</span> &#125;&#125;<span class="string">|int</span> <span class="string">&gt;=1</span></span><br></pre></td></tr></table></figure><blockquote><p>判断变量cattle_system_ns_state的结果如果为failed则执行create ns cattle-system任务</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">check</span> <span class="string">cattle-system</span> <span class="string">namespace</span> <span class="string">is</span> <span class="string">exists</span></span><br><span class="line">  <span class="attr">shell:</span> <span class="string">kubectl</span> <span class="string">get</span> <span class="string">ns|grep</span> <span class="string">cattle-system</span></span><br><span class="line">  <span class="attr">register:</span> <span class="string">cattle_system_ns_state</span></span><br><span class="line">  <span class="attr">ignore_errors:</span> <span class="literal">True</span></span><br><span class="line">  <span class="attr">run_once:</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">create</span> <span class="string">namespace</span> <span class="string">cattle-system</span></span><br><span class="line">  <span class="attr">shell:</span> <span class="string">kubectl</span> <span class="string">create</span> <span class="string">namespace</span> <span class="string">cattle-system</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">cattle_system_ns_state</span> <span class="string">|</span> <span class="string">failed</span></span><br><span class="line">  <span class="attr">run_once:</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="changed-when"><a href="#changed-when" class="headerlink" title="changed_when"></a>changed_when</h2><blockquote><p>先执行task,并对task返回的值进行判断，当满足changed_when指定的条件时说明是执行成功的</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">check</span> <span class="string">hostname</span></span><br><span class="line">    <span class="attr">shell:</span> <span class="string">&quot;hostname&quot;</span></span><br><span class="line">    <span class="attr">changed_when:</span> <span class="string">ansible_hostname</span> <span class="string">==</span> <span class="string">&quot;master01&quot;</span></span><br></pre></td></tr></table></figure><h1 id="ansible循环"><a href="#ansible循环" class="headerlink" title="ansible循环"></a>ansible循环</h1><p>在Ansible中，循环通常使用<code>loop</code>关键字实现。Ansible支持多种类型的循环，包括：</p><table><thead><tr><th>循环类型</th><th>描述</th></tr></thead><tbody><tr><td><code>loop</code></td><td>基本循环，用于遍历列表、字典等</td></tr><tr><td><code>until</code></td><td>直到某些条件满足之前循环执行</td></tr><tr><td><code>while</code></td><td>在某些条件满足的情况下循环执行</td></tr><tr><td><code>with_*</code></td><td>与变量一起使用的特殊循环，例如<code>with_items</code>、<code>with_dict</code>、<code>with_file</code>等</td></tr></tbody></table><p>另外，Ansible还支持嵌套循环和循环控制语句（如<code>break</code>、<code>continue</code>等），可以根据具体情况选择使用。</p><h1 id="ansible变量"><a href="#ansible变量" class="headerlink" title="ansible变量"></a>ansible变量</h1><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>字符串</td><td>由单引号、双引号或反斜杠括起来的字符序列，可以包含变量或表达式</td></tr><tr><td>数字</td><td>整数或浮点数</td></tr><tr><td>布尔值</td><td>True 或 False</td></tr><tr><td>列表</td><td>由方括号括起来的元素列表，元素可以是任何类型的值，用逗号分隔</td></tr><tr><td>字典</td><td>由大括号括起来的键值对，用冒号分隔，键和值之间用等号或空格分隔，键值对之间用逗号分隔</td></tr><tr><td>None</td><td>表示空值或未定义值的特殊类型</td></tr></tbody></table><h1 id="Playbooks"><a href="#Playbooks" class="headerlink" title="Playbooks"></a>Playbooks</h1><p>Playboos:简单说就是定义一个配置文件，文件中写入你需要安装的服务，配置文件，变量等信息。可以安装事先定义好的机制完成一个任务</p><h2 id="yml脚本语法"><a href="#yml脚本语法" class="headerlink" title="yml脚本语法"></a>yml脚本语法</h2><ul><li>文件开头用<code>---</code>开始</li><li>在冒号之后，必须存在一个空格</li><li>name和模块名称必须对齐</li><li>hosts和tasks必须对齐</li><li>在书写key和value的时候，不能存在空格</li></ul><h2 id="playbooks组成部分"><a href="#playbooks组成部分" class="headerlink" title="playbooks组成部分"></a>playbooks组成部分</h2><table><thead><tr><th>目录名称</th><th>作用</th></tr></thead><tbody><tr><td>tasks</td><td>包含当前角色的所有任务</td></tr><tr><td>handlers</td><td>包含当前角色的所有处理程序</td></tr><tr><td>templates</td><td>包含当前角色需要使用的模板文件</td></tr><tr><td>files</td><td>包含当前角色需要使用的一些文件，这些文件通常是不需要经过模板处理的，如一些二进制文件等</td></tr><tr><td>vars</td><td>包含当前角色的变量定义文件</td></tr><tr><td>defaults</td><td>包含当前角色的默认变量文件</td></tr><tr><td>meta</td><td>包含当前角色的依赖信息，如依赖哪些其它角色等</td></tr><tr><td>library</td><td>包含当前角色需要使用的Ansible模块，这些模块通常是需要自行编写的</td></tr><tr><td>module_utils</td><td>包含当前角色需要使用的Ansible模块工具库</td></tr><tr><td>lookup_plugins</td><td>包含当前角色需要使用的Ansible查找插件</td></tr><tr><td>filter_plugins</td><td>包含当前角色需要使用的Ansible过滤器插件</td></tr><tr><td>test</td><td>包含当前角色需要使用的Ansible测试模块</td></tr><tr><td>role_name.yml</td><td>包含当前角色的主任务文件，可以是多个yml文件，用来定义角色执行时的流程控制</td></tr></tbody></table><h1 id="ansible模块开发"><a href="#ansible模块开发" class="headerlink" title="ansible模块开发"></a>ansible模块开发</h1><h2 id="检查TCP端口"><a href="#检查TCP端口" class="headerlink" title="检查TCP端口"></a>检查TCP端口</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ansible.module_utils.basic <span class="keyword">import</span> AnsibleModule</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    module = AnsibleModule(</span><br><span class="line">        argument_spec=<span class="built_in">dict</span>(</span><br><span class="line">            host=<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;str&#x27;</span>, required=<span class="literal">True</span>),</span><br><span class="line">            port=<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;int&#x27;</span>, required=<span class="literal">True</span>),</span><br><span class="line">            timeout=<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;int&#x27;</span>, default=<span class="number">1</span>),</span><br><span class="line">        ),</span><br><span class="line">        supports_check_mode=<span class="literal">False</span>,</span><br><span class="line">        no_log=<span class="literal">True</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    host = module.params[<span class="string">&#x27;host&#x27;</span>]</span><br><span class="line">    port = module.params[<span class="string">&#x27;port&#x27;</span>]</span><br><span class="line">    timeout = module.params[<span class="string">&#x27;timeout&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    sock.settimeout(timeout)</span><br><span class="line">    result = &#123;&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        sock.connect((host, port))</span><br><span class="line">        result[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&quot;Port &#123;&#125; is open on host &#123;&#125;&quot;</span>.<span class="built_in">format</span>(port, host)</span><br><span class="line">        result[<span class="string">&#x27;rc&#x27;</span>] = <span class="number">0</span></span><br><span class="line">        result[<span class="string">&#x27;status&#x27;</span>] = <span class="string">&#x27;ok&#x27;</span></span><br><span class="line">    <span class="keyword">except</span> socket.error <span class="keyword">as</span> e:</span><br><span class="line">        result[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&quot;Port &#123;&#125; is not open on host &#123;&#125;: &quot;</span>.<span class="built_in">format</span>(port, host)</span><br><span class="line">        result[<span class="string">&#x27;rc&#x27;</span>] = <span class="number">0</span></span><br><span class="line">        result[<span class="string">&#x27;status&#x27;</span>] = <span class="string">&#x27;failed&#x27;</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        sock.close()</span><br><span class="line"></span><br><span class="line">    module.exit_json(**result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="调用第三方接口处理数据"><a href="#调用第三方接口处理数据" class="headerlink" title="调用第三方接口处理数据"></a>调用第三方接口处理数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> ansible.module_utils.basic <span class="keyword">import</span> AnsibleModule</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.DEBUG,<span class="built_in">format</span>=<span class="string">&quot;%(asctime)s  %(levelname)s  %(message)s&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">API</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    module = AnsibleModule(</span><br><span class="line">        argument_spec=<span class="built_in">dict</span>(</span><br><span class="line">            host=<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;str&#x27;</span>, required=<span class="literal">True</span>),</span><br><span class="line">            login_user=<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;str&#x27;</span>, required=<span class="literal">True</span>),</span><br><span class="line">            login_pass=<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;str&#x27;</span>, required=<span class="literal">True</span>),</span><br><span class="line">            name=<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;str&#x27;</span>, required=<span class="literal">True</span>)</span><br><span class="line">        ),</span><br><span class="line">        supports_check_mode=<span class="literal">False</span>,</span><br><span class="line">        no_log=<span class="literal">True</span></span><br><span class="line">    )</span><br><span class="line">    host = module.params[<span class="string">&#x27;host&#x27;</span>]</span><br><span class="line">    login_user = module.params[<span class="string">&#x27;login_user&#x27;</span>]</span><br><span class="line">    login_pass = module.params[<span class="string">&#x27;login_pass&#x27;</span>]</span><br><span class="line">    name = module.params[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">    api = API(host, login_user, login_pass)</span><br><span class="line">    data = api.get_conf(name)</span><br><span class="line">    result = &#123;&#125;</span><br><span class="line">    result[<span class="string">&#x27;stdout&#x27;</span>] = data</span><br><span class="line">    module.exit_json(**result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins教程</title>
      <link href="/2023/05/09/Jenkins%E6%95%99%E7%A8%8B/"/>
      <url>/2023/05/09/Jenkins%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Jenkins基础"><a href="#Jenkins基础" class="headerlink" title="Jenkins基础"></a>Jenkins基础</h1><h2 id="label"><a href="#label" class="headerlink" title="label"></a>label</h2><p>指定要运行pipeline的节点</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">pipeline&#123;</span><br><span class="line">    agent &#123;</span><br><span class="line">        label <span class="string">&quot;centos&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="env"><a href="#env" class="headerlink" title="env"></a>env</h2><p>用来定义运行<code>pipeline</code>的一些变量，比如保存在Jenkins的密码、访问URL等类型资源</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">pipeline&#123;</span><br><span class="line">    environment &#123;</span><br><span class="line">        Var_nginx_cred_id = <span class="string">&quot;c550e285-3e66-429d-b35a-f01bf47a1d16&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h2><p>常用来拉取代码，支持<code>gitlab、svn</code>等</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">pipeline&#123;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;checkout nginx source&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                deleteDir()</span><br><span class="line">                checkout([<span class="attr">$class:</span> <span class="string">&#x27;GitSCM&#x27;</span>, <span class="attr">branches:</span> [[<span class="attr">name:</span> <span class="string">&#x27;*/master&#x27;</span>]], <span class="attr">extensions:</span> [[<span class="attr">$class:</span> <span class="string">&#x27;RelativeTargetDirectory&#x27;</span>, <span class="attr">relativeTargetDir:</span> <span class="string">&#x27;jenkins-pipeline&#x27;</span>]], <span class="attr">gitTool:</span> <span class="string">&#x27;GIT_Latest_Linux&#x27;</span>, <span class="attr">userRemoteConfigs:</span> [[<span class="attr">credentialsId:</span> <span class="string">&#x27;GITHUB_TOKEN&#x27;</span>, <span class="attr">url:</span> <span class="string">&#x27;https://gitee.com/acaiblog/jenkins-pipeline.git&#x27;</span>]]])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="script"><a href="#script" class="headerlink" title="script"></a>script</h2><p>用来执行<code>shell</code>命令；也可以通过<code>script</code>模块实现if条件判断</p><h3 id="script执行多条shell"><a href="#script执行多条shell" class="headerlink" title="script执行多条shell"></a>script执行多条shell</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">pipline &#123;</span><br><span class="line">    stage(<span class="string">&quot;xxxxx&quot;</span>) &#123;</span><br><span class="line">        steps &#123;</span><br><span class="line">            script &#123;</span><br><span class="line">                sh <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                echo &#x27;111&#x27;</span></span><br><span class="line"><span class="string">                echo &#x27;222&#x27;</span></span><br><span class="line"><span class="string">                &quot;&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="script条件判断"><a href="#script条件判断" class="headerlink" title="script条件判断"></a>script条件判断</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">pipline &#123;</span><br><span class="line">    stage(<span class="string">&quot;xxxxx&quot;</span>) &#123;</span><br><span class="line">        steps &#123;</span><br><span class="line">            script &#123;</span><br><span class="line">                <span class="keyword">if</span> (branch == <span class="string">&#x27;sit&#x27;</span>) &#123;</span><br><span class="line">                    sh <span class="string">&quot;&quot;&quot;xxx&quot;&quot;&quot;</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sh <span class="string">&quot;&quot;&quot;yyy&quot;&quot;&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="script执行脚本并返回结果"><a href="#script执行脚本并返回结果" class="headerlink" title="script执行脚本并返回结果"></a>script执行脚本并返回结果</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">pipline &#123;</span><br><span class="line">    stage(<span class="string">&quot;xxxxx&quot;</span>) &#123;</span><br><span class="line">        steps &#123;</span><br><span class="line">            script &#123;</span><br><span class="line">                <span class="keyword">def</span> res = sh(<span class="attr">script:</span> <span class="string">&quot;../venv/bin/python main.py $paramsJson&quot;</span>, <span class="attr">returnStdout:</span> <span class="literal">true</span>).trim()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="withEnv"><a href="#withEnv" class="headerlink" title="withEnv"></a>withEnv</h2><p>使用<code>withEnv</code>可以自定义环境的环境变量</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">pipline &#123;</span><br><span class="line">    stage(<span class="string">&quot;xxxxx&quot;</span>) &#123;</span><br><span class="line">        steps &#123;</span><br><span class="line">            dir(<span class="string">&#x27;test&#x27;</span>) &#123;</span><br><span class="line">                withEnv([<span class="string">&quot;JAVA_HOME=$&#123;WORKSPACE&#125;/jdk1.7.0_79&quot;</span>,<span class="string">&quot;ANT_HOME=$&#123;WORKSPACE&#125;/apache-ant-1.9.4&quot;</span>]) &#123;</span><br><span class="line">                    sh <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                    java -version</span></span><br><span class="line"><span class="string">                    ant -version</span></span><br><span class="line"><span class="string">                    &quot;&quot;&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="withCredentials"><a href="#withCredentials" class="headerlink" title="withCredentials"></a>withCredentials</h2><p><code>withCredentials</code>可以用来将Jenkins保存的用户名密码提供给脚本使用</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">pipline &#123;</span><br><span class="line">    stage(<span class="string">&quot;xxxxx&quot;</span>) &#123;</span><br><span class="line">        steps &#123;</span><br><span class="line">            dir(<span class="string">&#x27;test&#x27;</span>) &#123;</span><br><span class="line">                withCredentials([usernamePassword(<span class="attr">credentialsId:</span><span class="string">&quot;$&#123;Var_github_cred_id&#125;&quot;</span>,</span><br><span class="line">                        <span class="symbol">usernameVariable:</span> <span class="string">&#x27;git_username&#x27;</span>,<span class="attr">passwordVariable:</span><span class="string">&#x27;git_password&#x27;</span>)]) &#123;</span><br><span class="line">                    sh <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                    echo $&#123;git_username&#125; $&#123;git_password&#125;</span></span><br><span class="line"><span class="string">                    &quot;&quot;&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="input"><a href="#input" class="headerlink" title="input"></a>input</h2><p>给<code>Jenkins input</code>定义两个选项：<code>确认/取消</code>；根据用户选择的选项判断当前脚本是否执行</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">pipline &#123;</span><br><span class="line">    stage(<span class="string">&quot;xxxxx&quot;</span>) &#123;</span><br><span class="line">        steps &#123;</span><br><span class="line">            script &#123;</span><br><span class="line">                <span class="keyword">def</span> userInput = input <span class="attr">message:</span> <span class="string">&#x27;确认操作&#x27;</span>, <span class="attr">parameters:</span> [</span><br><span class="line">                        [<span class="attr">$class:</span> <span class="string">&#x27;ChoiceParameterDefinition&#x27;</span>, <span class="attr">choices:</span> <span class="string">&#x27;确认/取消&#x27;</span>,</span><br><span class="line">                        <span class="symbol">description:</span><span class="string">&#x27;请选择你要操作的类型&#x27;</span>,<span class="attr">name:</span><span class="string">&#x27;operation&#x27;</span>]</span><br><span class="line">                ]</span><br><span class="line">                <span class="keyword">if</span> (userInput == <span class="string">&#x27;确认&#x27;</span>) &#123;</span><br><span class="line">                    sh <span class="string">&quot;echo 111&quot;</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (userInput == <span class="string">&#x27;取消&#x27;</span>)&#123;</span><br><span class="line">                    sh <span class="string">&quot;echo 222&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="groovy"><a href="#groovy" class="headerlink" title="groovy"></a>groovy</h1><h2 id="groovy-exmaple"><a href="#groovy-exmaple" class="headerlink" title="groovy exmaple"></a>groovy exmaple</h2><blockquote><p>将params转换为Json数据</p></blockquote><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> groovy.json.JsonOutput</span><br><span class="line"><span class="keyword">def</span> paramsJson = JsonOutput.toJson(params)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git svn常用命令</title>
      <link href="/2023/05/09/git-svn%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/05/09/git-svn%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><h2 id="查看tag在哪个分支"><a href="#查看tag在哪个分支" class="headerlink" title="查看tag在哪个分支"></a>查看tag在哪个分支</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch --contains tags/&lt;tag_id&gt;</span><br></pre></td></tr></table></figure><h2 id="合并commit-id代码"><a href="#合并commit-id代码" class="headerlink" title="合并commit id代码"></a>合并commit id代码</h2><ol><li>获取a分支代码commit id</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout a</span><br><span class="line">git log</span><br></pre></td></tr></table></figure><ol start="2"><li>合并commit id到b分支</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout b</span><br><span class="line">git cherry-pick &lt;commit_id&gt;</span><br></pre></td></tr></table></figure><h2 id="回退代码"><a href="#回退代码" class="headerlink" title="回退代码"></a>回退代码</h2><blockquote><p>本地代码回退</p></blockquote><ol><li>登录github获取要回退的commit id</li><li>执行代码回退</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard &lt;commid_id&gt;</span><br></pre></td></tr></table></figure><p>回退代码参数说明：</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>git reset HEAD</td><td>回退到当前版本</td></tr><tr><td>git reset –hard HEAD^</td><td>回退到上一个版本</td></tr><tr><td>git reset –hard HEAD^^</td><td>回退到上上一个版本</td></tr><tr><td>git reset –hard <commid_id></td><td>回退到指定commit id</td></tr></tbody></table><blockquote><p>远程代码回退</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard &lt;commid_id&gt;</span><br><span class="line">git push -f origin master</span><br></pre></td></tr></table></figure><h1 id="svn"><a href="#svn" class="headerlink" title="svn"></a>svn</h1><blockquote><p>命令合集</p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>svn checkout</td><td>从远程仓库中获取项目代码到本地</td></tr><tr><td>svn add</td><td>将新文件或文件夹添加到本地 svn 仓库中</td></tr><tr><td>svn commit</td><td>将修改后的文件或文件夹提交到远程 svn 仓库中</td></tr><tr><td>svn update</td><td>将远程 svn 仓库中最新的代码更新到本地</td></tr><tr><td>svn revert</td><td>撤销本地的修改，回到原始状态</td></tr><tr><td>svn status</td><td>查看当前项目的 svn 状态</td></tr><tr><td>svn log</td><td>查看项目的提交历史</td></tr><tr><td>svn merge</td><td>将不同分支的代码合并到一起</td></tr><tr><td>svn switch</td><td>切换当前项目的 svn 分支</td></tr><tr><td>svn export</td><td>导出指定版本的项目代码到本地</td></tr><tr><td>svn info</td><td>查看当前项目的 svn 信息</td></tr><tr><td>svn cleanup</td><td>清除本地项目中的 svn 缓存信息</td></tr></tbody></table><blockquote><p>svn提交流程</p></blockquote><ol><li>添加文件到svn</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">svn add [file path]</span><br></pre></td></tr></table></figure><ol start="2"><li>commit提交到svn</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">svn commit [file path] -m &quot;commit msg&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuex状态管理</title>
      <link href="/2023/05/08/Vuex%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"/>
      <url>/2023/05/08/Vuex%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Vuex概念"><a href="#Vuex概念" class="headerlink" title="Vuex概念"></a>Vuex概念</h1><p><code>Vuex</code> 是一个专为 <code>Vue.js</code> 应用程序开发的状态管理模式，它采用集中式存储管理应用的所有组件的状态。<code>Vuex</code> 的存储管理器分为以下几个部分：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>state</td><td>即存储状态的数据。在 <code>Vuex</code> 中，存储状态的数据被定义为一个对象，称为 <code>state</code> 对象。它是所有组件共享的数据源</td></tr><tr><td>getters</td><td>用于从 <code>state</code> 中派生出一些状态，类似于计算属性。<code>Getters</code> 可以让你在模板中使用简单的方法计算衍生出来的状态</td></tr><tr><td>mutations</td><td>用于修改 <code>state</code> 中的数据。<code>Mutations</code> 只能通过提交（<code>commit</code>）来调用，不能直接修改 <code>state</code> 中的数据。这样可以更好地跟踪状态的修改，便于调试。</td></tr><tr><td>actions</td><td>用于处理异步操作，可以包含任意异步操作。<code>Actions</code> 可以包含多个 <code>Mutation</code>，并且可以通过提交（<code>commit</code>）调用 <code>Mutation</code>。<code>Actions</code> 中的操作是异步的，可以用来处理网络请求等操作。</td></tr><tr><td>modules</td><td>用于将 <code>Vuex</code> 的 <code>store</code> 分割成模块。每个模块拥有自己的 <code>state</code>、<code>mutations</code>、<code>actions</code> 和 <code>getters</code>。</td></tr></tbody></table><p>具体目录如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">store</span><br><span class="line">├── getters.js</span><br><span class="line">├── index.js</span><br><span class="line">└── modules</span><br></pre></td></tr></table></figure><p>说明：</p><table><thead><tr><th>目录/文件名</th><th>描述</th></tr></thead><tbody><tr><td>modules</td><td>目录存放了 Vuex 中的模块（module），可以根据业务需求将不同的状态分离成不同的模块</td></tr><tr><td>getters.js</td><td>存放了所有的 Vuex getter 函数，getter 函数可以认为是 store 中的计算属性</td></tr><tr><td>index.js</td><td>是 Vuex 的主入口文件，它用于创建和配置 Vuex store 实例，将 state、mutations、actions、getters 和 modules 等组合在一起</td></tr></tbody></table><h1 id="通过Vux实现子组件数据传递"><a href="#通过Vux实现子组件数据传递" class="headerlink" title="通过Vux实现子组件数据传递"></a>通过Vux实现子组件数据传递</h1><h2 id="vuex实现"><a href="#vuex实现" class="headerlink" title="vuex实现"></a>vuex实现</h2><ol><li>在modules目录下创建ad.js文件，文件内容如下：</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#vi src/store/modules/ad.js</span><br><span class="line">import api from &#x27;@/api/ad&#x27;</span><br><span class="line"></span><br><span class="line">const state = &#123;</span><br><span class="line">  // 初始化变量以及接受数据的类型</span><br><span class="line">  tableDataList: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const mutations = &#123;</span><br><span class="line">  // 主要用来修改state中变量的数据，传递的data的数据类型必须是变量可以接受的数据类型</span><br><span class="line">  // 比如Array</span><br><span class="line">  setTableData(state, data) &#123;</span><br><span class="line">    state.tableDataList = data</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  // actions的函数名称用来调用action触发mutations来达到修改数据</span><br><span class="line">const actions = &#123;</span><br><span class="line">  async searchTableData(&#123; commit &#125;, searchData) &#123;</span><br><span class="line">    const &#123; data &#125; = await api.list(searchData)</span><br><span class="line">    // 将获取的数据处理成Array之后通过commit方法触发mutations的setTableData函数修改state的值</span><br><span class="line">    commit(&#x27;setTableData&#x27;, data.results)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  // 如果开启命名空间则访问actions函数时需要带上命名空间的名称，</span><br><span class="line">  // 比如this.$store.dispatch(&#x27;ad/searchTableData&#x27;, data) </span><br><span class="line">  // 这里的ad就是命名空间，命名空间的名字和模块名字保持一致</span><br><span class="line">  namespaced: true,</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>设置getters</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi src/store/getters.js</span><br><span class="line">const getters = &#123;</span><br><span class="line">  tableDataList: state =&gt; state.ad.tableDataList</span><br><span class="line">&#125;</span><br><span class="line">export defaults getters</span><br></pre></td></tr></table></figure><ol start="3"><li>在index.js中将vuex属性导入store</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import Vuex from &#x27;vuex&#x27;</span><br><span class="line">import getters from &#x27;./getters&#x27;</span><br><span class="line">import ad from &#x27;./modules/ad&#x27;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    ad</span><br><span class="line">  &#125;,</span><br><span class="line">  getters</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default store</span><br></pre></td></tr></table></figure><h2 id="使用vuex案例"><a href="#使用vuex案例" class="headerlink" title="使用vuex案例"></a>使用vuex案例</h2><blockquote><p>需求</p></blockquote><ol><li>有三个组件index.vue、search.vue、tableList.vue</li><li>index.vue为search.vue和tablelist.vue的父组件</li><li>需要实现search.vue点击button按钮之后将数据传递给tablelist.vue组件，并且将数据在tablelist组件上展示出来</li></ol><blockquote><p>在index.vue中导入子组件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div style=&quot;margin-top: 10px&quot;&gt;</span><br><span class="line">    &lt;search&gt;&lt;/search&gt;</span><br><span class="line">    &lt;table-list style=&quot;margin-top: -10px&quot;&gt;&lt;/table-list&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import search from &#x27;@/views/ad/search&#x27;</span><br><span class="line">import tableList from &#x27;@/views/ad/tableList&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  // eslint-disable-next-line vue/no-unused-components</span><br><span class="line">  components: &#123; search, tableList &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>在search.vue组件中定义一个函数，点击button时调用这个函数</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  queryData() &#123;</span><br><span class="line">    // ad/ 代表使用ad命名空间下的searchTableData</span><br><span class="line">    this.$store.dispatch(&#x27;ad/searchTableData&#x27;, this.searchMap)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>在tableList.vue组件中定义要展示的数据</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  // 使用mapState函数将ad命名空间下tableDataList变量中的数据获取并赋值给el-table标签传递给table显示数据</span><br><span class="line">  ...mapState(&#x27;ad&#x27;, [&#x27;tableDataList&#x27;])</span><br><span class="line">&#125;,</span><br><span class="line">created() &#123;</span><br><span class="line">  // created钩子函数调用searchTableData actions将调用api接口获取到的数据通过commit触发mutations函数将数据保存到state中让computed调用</span><br><span class="line">  this.$store.dispatch(&#x27;ad/searchTableData&#x27;, this.searchMap)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> VueJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vuex </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
